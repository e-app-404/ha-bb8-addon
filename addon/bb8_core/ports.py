from __future__ import annotations

from collections.abc import Awaitable, Callable
from typing import Any, Protocol, runtime_checkable


@runtime_checkable
class MqttBus(Protocol):
    async def publish(
        self, topic: str, payload: Any, retain: bool = False, qos: int = 0
    ) -> None: ...
    async def subscribe(
        self, topic: str, cb: Callable[[str, bytes, bool], Awaitable[None]]
    ) -> None: ...
    async def close(self) -> None: ...


@runtime_checkable
class BleTransport(Protocol):
    async def start(self) -> None: ...
    async def stop(self) -> None: ...
    def on_event(self, cb: Callable[[str, dict], None]) -> None: ...


@runtime_checkable
class Clock(Protocol):
    def monotonic(self) -> float: ...
    async def sleep(self, seconds: float) -> None: ...


@runtime_checkable
class Logger(Protocol):
    def debug(self, *a, **k): ...
    def info(self, *a, **k): ...
    def warning(self, *a, **k): ...
    def error(self, *a, **k): ...
    def exception(self, *a, **k): ...
