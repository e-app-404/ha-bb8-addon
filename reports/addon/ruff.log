warning: The top-level linter settings are deprecated in favour of their counterparts in the `lint` section. Please update the following options in `pyproject.toml`:
  - 'extend-select' -> 'lint.extend-select'
E402 Module level import not at top of file
  --> bb8_core/addon_config.py:33:1
   |
33 | from pathlib import Path
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |

N806 Variable `CANDIDATE_PATHS` in function should be lowercase
  --> bb8_core/addon_config.py:38:5
   |
36 | def _load_yaml_cfg() -> Dict:
37 |     # Candidate search paths with HA-first priority
38 |     CANDIDATE_PATHS = [
   |     ^^^^^^^^^^^^^^^
39 |         Path("/config/config.yaml"),
40 |         Path("/addons/local/beep_boop_bb8/config.yaml"),
   |

F841 Local variable `loaded_config` is assigned to but never used
  --> bb8_core/addon_config.py:46:5
   |
44 |     ]
45 |
46 |     loaded_config = None
   |     ^^^^^^^^^^^^^
47 |     source_path = None
   |
help: Remove assignment to unused variable `loaded_config`

F841 Local variable `source_path` is assigned to but never used
  --> bb8_core/addon_config.py:54:17
   |
52 |                 with path.open("r", encoding="utf-8") as f:
53 |                     yml = yaml.safe_load(f) or {}
54 |                 source_path = path
   |                 ^^^^^^^^^^^
55 |                 LOG.info(f"[CONFIG] Loaded config from: {path}")
56 |                 if (
   |
help: Remove assignment to unused variable `source_path`

E501 Line too long (89 > 88)
  --> bb8_core/addon_config.py:91:89
   |
89 | def _validate_config_schema(cfg: Dict, schema: Dict):
90 |     """
91 |     Validate the configuration dictionary `cfg` against the provided `schema` dictionary.
   |                                                                                         ^
92 |
93 |     Args:
   |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   --> bb8_core/addon_config.py:107:29
    |
105 |         val = cfg[key]
106 |         # Only basic type checks
107 |         if typ == "bool" or typ == bool:
    |                             ^^^^^^^^^^^
108 |             if not isinstance(val, bool):
109 |                 LOG.warning(
    |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   --> bb8_core/addon_config.py:112:30
    |
110 |                     f"[CONFIG] Key '{key}' expected bool, got {type(val).__name__}."
111 |                 )
112 |         elif typ == "int" or typ == int or typ == "int?":
    |                              ^^^^^^^^^^
113 |             try:
114 |                 int(val)
    |

E501 Line too long (97 > 88)
   --> bb8_core/addon_config.py:117:89
    |
115 |             except Exception:
116 |                 LOG.warning(
117 |                     f"[CONFIG] Key '{key}' expected int, got {type(val).__name__} value '{val}'."
    |                                                                                         ^^^^^^^^^
118 |                 )
119 |         elif typ == "str" or typ == str or typ == "str?":
    |

E721 Use `is` and `is not` for type comparisons, or `isinstance()` for isinstance checks
   --> bb8_core/addon_config.py:119:30
    |
117 |                     f"[CONFIG] Key '{key}' expected int, got {type(val).__name__} value '{val}'."
118 |                 )
119 |         elif typ == "str" or typ == str or typ == "str?":
    |                              ^^^^^^^^^^
120 |             if not isinstance(val, str):
121 |                 LOG.warning(
    |

E501 Line too long (113 > 88)
   --> bb8_core/addon_config.py:155:89
    |
153 |     # Use default
154 |     LOG.debug(
155 |         f"[CONFIG] Key '{key}' (yaml_key='{yaml_key}') not found in env/options/yaml, using default '{default}'."
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
156 |     )
157 |     return default, "default"
    |

E501 Line too long (100 > 88)
   --> bb8_core/addon_config.py:170:89
    |
169 |     def setk(k, default, yaml_key=None, cast=None):
170 |         """Set config key with precedence: env > options > yaml > default. Optionally cast value."""
    |                                                                                         ^^^^^^^^^^^^
171 |         v, s = _pick(k, env, opt, yml, default, yaml_key)
172 |         LOG.debug(
    |

E501 Line too long (94 > 88)
   --> bb8_core/addon_config.py:173:89
    |
171 |         v, s = _pick(k, env, opt, yml, default, yaml_key)
172 |         LOG.debug(
173 |             f"[CONFIG] Mapping key '{k}' (yaml_key='{yaml_key}') -> value '{v}' (source: {s})"
    |                                                                                         ^^^^^^
174 |         )
175 |         if cast and v not in (None, ""):
    |

E501 Line too long (239 > 88)
   --> bb8_core/addon_config.py:195:89
    |
193 | …
194 | …
195 | …lly means the config loader failed, the environment is not activated, or config.yaml is missing/unreadable. cfg: { {k: cfg.get(k) for k in critical_keys} }"
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 | …
    |

E501 Line too long (94 > 88)
   --> bb8_core/addon_config.py:274:89
    |
272 |         f"  MQTT_PORT={cfg['MQTT_PORT']} ⟂ {src['MQTT_PORT']}",
273 |         f"  MQTT_USER='{cfg['MQTT_USERNAME']}' ⟂ {src['MQTT_USERNAME']}",
274 |         f"  MQTT_PASSWORD={'***' if cfg['MQTT_PASSWORD'] else None} ⟂ {src['MQTT_PASSWORD']}",
    |                                                                                         ^^^^^^
275 |         f"  MQTT_BASE='{cfg['MQTT_BASE']}' ⟂ {src['MQTT_BASE']}",
276 |         f"  ENABLE_BRIDGE_TELEMETRY={cfg['ENABLE_BRIDGE_TELEMETRY']} ⟂ {src['ENABLE_BRIDGE_TELEMETRY']}",
    |

E501 Line too long (105 > 88)
   --> bb8_core/addon_config.py:276:89
    |
274 |         f"  MQTT_PASSWORD={'***' if cfg['MQTT_PASSWORD'] else None} ⟂ {src['MQTT_PASSWORD']}",
275 |         f"  MQTT_BASE='{cfg['MQTT_BASE']}' ⟂ {src['MQTT_BASE']}",
276 |         f"  ENABLE_BRIDGE_TELEMETRY={cfg['ENABLE_BRIDGE_TELEMETRY']} ⟂ {src['ENABLE_BRIDGE_TELEMETRY']}",
    |                                                                                         ^^^^^^^^^^^^^^^^^
277 |         f"  TELEMETRY_INTERVAL_S={cfg['TELEMETRY_INTERVAL_S']} ⟂ {src['TELEMETRY_INTERVAL_S']}",
278 |         f"  Add-on version: {cfg['ADDON_VERSION']} ⟂ {src['ADDON_VERSION']}",
    |

E501 Line too long (96 > 88)
   --> bb8_core/addon_config.py:277:89
    |
275 |         f"  MQTT_BASE='{cfg['MQTT_BASE']}' ⟂ {src['MQTT_BASE']}",
276 |         f"  ENABLE_BRIDGE_TELEMETRY={cfg['ENABLE_BRIDGE_TELEMETRY']} ⟂ {src['ENABLE_BRIDGE_TELEMETRY']}",
277 |         f"  TELEMETRY_INTERVAL_S={cfg['TELEMETRY_INTERVAL_S']} ⟂ {src['TELEMETRY_INTERVAL_S']}",
    |                                                                                         ^^^^^^^^
278 |         f"  Add-on version: {cfg['ADDON_VERSION']} ⟂ {src['ADDON_VERSION']}",
279 |     ]
    |

E501 Line too long (108 > 88)
 --> bb8_core/auto_detect.py:4:89
  |
2 | auto_detect.py
3 |
4 | Scans for BB-8 devices, caches MAC addresses, and provides auto-detection logic for robust device discovery.
  |                                                                                         ^^^^^^^^^^^^^^^^^^^^
5 | """
  |

E501 Line too long (92 > 88)
  --> bb8_core/bb8_presence_scanner.py:10:89
   |
 8 | def publish_extended_discovery(client, base, device_id, device_block):
 9 |     """
10 |     Publish extended Home Assistant discovery configs for LED, sleep, drive, heading, speed.
   |                                                                                         ^^^^
11 |     Topics and payloads match those in discovery_publish.py for compatibility.
12 |     """
   |

E501 Line too long (96 > 88)
   --> bb8_core/bb8_presence_scanner.py:114:89
    |
112 | def make_device_id(mac: str) -> str:
113 |     """
114 |     Normalize MAC to lowercase hex without colons (e.g., 'AA:BB:CC:DD:EE:FF' -> 'aabbccddeeff').
    |                                                                                         ^^^^^^^^
115 |     """
116 |     return (mac or "").replace(":", "").lower()
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:123:1
    |
123 | import argparse
    | ^^^^^^^^^^^^^^^
124 | import asyncio
125 | import json
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:124:1
    |
123 | import argparse
124 | import asyncio
    | ^^^^^^^^^^^^^^
125 | import json
126 | import logging
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:125:1
    |
123 | import argparse
124 | import asyncio
125 | import json
    | ^^^^^^^^^^^
126 | import logging
127 | import os
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:126:1
    |
124 | import asyncio
125 | import json
126 | import logging
    | ^^^^^^^^^^^^^^
127 | import os
128 | import threading
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:127:1
    |
125 | import json
126 | import logging
127 | import os
    | ^^^^^^^^^
128 | import threading
129 | import time
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:128:1
    |
126 | import logging
127 | import os
128 | import threading
    | ^^^^^^^^^^^^^^^^
129 | import time
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:129:1
    |
127 | import os
128 | import threading
129 | import time
    | ^^^^^^^^^^^
130 |
131 | import paho.mqtt.client as mqtt
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:131:1
    |
129 | import time
130 |
131 | import paho.mqtt.client as mqtt
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
132 | from bleak import BleakScanner
133 | from paho.mqtt.enums import CallbackAPIVersion
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:132:1
    |
131 | import paho.mqtt.client as mqtt
132 | from bleak import BleakScanner
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
133 | from paho.mqtt.enums import CallbackAPIVersion
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:133:1
    |
131 | import paho.mqtt.client as mqtt
132 | from bleak import BleakScanner
133 | from paho.mqtt.enums import CallbackAPIVersion
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
134 |
135 | from .addon_config import load_config, log_config
    |

E402 Module level import not at top of file
   --> bb8_core/bb8_presence_scanner.py:135:1
    |
133 | from paho.mqtt.enums import CallbackAPIVersion
134 |
135 | from .addon_config import load_config, log_config
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
136 |
137 | logger = logging.getLogger("bb8_presence_scanner")
    |

E501 Line too long (107 > 88)
   --> bb8_core/bb8_presence_scanner.py:358:89
    |
356 | CMD_POWER_SET = f"{MQTT_BASE}/cmd/power_set"  # payload: "ON"|"OFF"
357 | CMD_STOP_PRESS = f"{MQTT_BASE}/cmd/stop_press"  # payload: anything
358 | CMD_LED_SET = f"{MQTT_BASE}/cmd/led_set"  # payload: {{"r":..,"g":..,"b":..}} | {{"hex":"#RRGGBB"}} | "OFF"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^
359 | CMD_HEADING_SET = f"{MQTT_BASE}/cmd/heading_set"  # payload: number 0..359
360 | CMD_SPEED_SET = f"{MQTT_BASE}/cmd/speed_set"  # payload: number 0..255
    |

E501 Line too long (90 > 88)
   --> bb8_core/bb8_presence_scanner.py:524:89
    |
522 |     try:
523 |         d = json.loads(raw) if raw else {}
524 |         # Accept HA-native: {"state":"ON","color":{"r":..,"g":..,"b":..},"brightness":...}
    |                                                                                         ^^
525 |         if isinstance(d, dict) and d.get("state", "").upper() == "ON":
526 |             col = d.get("color") or {}
    |

E501 Line too long (105 > 88)
   --> bb8_core/bb8_presence_scanner.py:699:89
    |
697 |     Publish Home Assistant discovery for Presence and RSSI with full device block.
698 |     """
699 |     # TODO: Store and map device_defaults from facade_mapping_table.json to retrievable dynamic variables
    |                                                                                         ^^^^^^^^^^^^^^^^^
700 |     model_hint = model if model else CFG.get("BB8_NAME", "S33 BB84 LE")
701 |     name_hint = name if name else CFG.get("BB8_NAME", "BB-8")
    |

E501 Line too long (91 > 88)
   --> bb8_core/bb8_presence_scanner.py:780:89
    |
778 | async def scan_and_publish():
779 |     """
780 |     Scan loop: find BB-8, publish presence/RSSI (retained), publish discovery once per MAC.
    |                                                                                         ^^^
781 |     """
782 |     published_discovery_for = None  # last MAC we advertised
    |

E501 Line too long (91 > 88)
   --> bb8_core/bb8_presence_scanner.py:891:89
    |
889 |         # Discovery is emitted lazily after MAC/DBus are known; nothing to print upfront
890 |         print(
891 |             "# discovery will be published after a successful scan when MAC/DBus are known"
    |                                                                                         ^^^
892 |         )
893 |         raise SystemExit(0)
    |

E501 Line too long (127 > 88)
  --> bb8_core/ble_bridge.py:12:89
   |
10 | ble_bridge.py
11 |
12 | Orchestrates BLE operations for BB-8, manages device connection, and exposes diagnostics for Home Assistant add-on integration.
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
13 | """
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:15:1
   |
13 | """
14 |
15 | from typing import Any, Optional
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
16 |
17 | if TYPE_CHECKING:
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:19:1
   |
17 | if TYPE_CHECKING:
18 |     pass
19 | import asyncio
   | ^^^^^^^^^^^^^^
20 | import importlib.metadata
21 | import json
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:20:1
   |
18 |     pass
19 | import asyncio
20 | import importlib.metadata
   | ^^^^^^^^^^^^^^^^^^^^^^^^^
21 | import json
22 | import os
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:21:1
   |
19 | import asyncio
20 | import importlib.metadata
21 | import json
   | ^^^^^^^^^^^
22 | import os
23 | import time
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:22:1
   |
20 | import importlib.metadata
21 | import json
22 | import os
   | ^^^^^^^^^
23 | import time
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:23:1
   |
21 | import json
22 | import os
23 | import time
   | ^^^^^^^^^^^
24 |
25 | import paho.mqtt.publish as publish
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:25:1
   |
23 | import time
24 |
25 | import paho.mqtt.publish as publish
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
26 | from bleak import BleakClient
27 | from bleak.exc import BleakCharacteristicNotFoundError
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:26:1
   |
25 | import paho.mqtt.publish as publish
26 | from bleak import BleakClient
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
27 | from bleak.exc import BleakCharacteristicNotFoundError
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:27:1
   |
25 | import paho.mqtt.publish as publish
26 | from bleak import BleakClient
27 | from bleak.exc import BleakCharacteristicNotFoundError
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
28 |
29 | REQUIRE_DEVICE_ECHO = os.environ.get("REQUIRE_DEVICE_ECHO", "1") not in (
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:36:1
   |
34 | )
35 |
36 | from spherov2.adapter.bleak_adapter import BleakAdapter
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
37 | from spherov2.commands.core import IntervalOptions
38 | from spherov2.scanner import find_toys
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:37:1
   |
36 | from spherov2.adapter.bleak_adapter import BleakAdapter
37 | from spherov2.commands.core import IntervalOptions
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
38 | from spherov2.scanner import find_toys
39 | from spherov2.toy.bb8 import BB8
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:38:1
   |
36 | from spherov2.adapter.bleak_adapter import BleakAdapter
37 | from spherov2.commands.core import IntervalOptions
38 | from spherov2.scanner import find_toys
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
39 | from spherov2.toy.bb8 import BB8
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:39:1
   |
37 | from spherov2.commands.core import IntervalOptions
38 | from spherov2.scanner import find_toys
39 | from spherov2.toy.bb8 import BB8
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 |
41 | from .ble_utils import resolve_services
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:41:1
   |
39 | from spherov2.toy.bb8 import BB8
40 |
41 | from .ble_utils import resolve_services
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
42 | from .core import Core
43 | from .logging_setup import logger
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:42:1
   |
41 | from .ble_utils import resolve_services
42 | from .core import Core
   | ^^^^^^^^^^^^^^^^^^^^^^
43 | from .logging_setup import logger
   |

E402 Module level import not at top of file
  --> bb8_core/ble_bridge.py:43:1
   |
41 | from .ble_utils import resolve_services
42 | from .core import Core
43 | from .logging_setup import logger
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
44 |
45 | # Use config for device name and MAC
   |

E501 Line too long (110 > 88)
   --> bb8_core/ble_bridge.py:255:89
    |
253 |         Expected topics (under base_topic):
254 |           - power:    {base}/power/set   (payload: "ON"|"OFF")    -> {base}/power/state
255 |           - stop:     {base}/stop/press  (payload: any)           -> {base}/stop/state ("pressed" then "idle")
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^
256 |           - led:      {base}/led/set     (json: {"r":..,"g":..,"b":..} or {"hex":"#rrggbb"} or "OFF")
257 |                       -> {base}/led/state (json {"r":..,"g":..,"b":..} or {"state":"OFF"})
    |

E501 Line too long (101 > 88)
   --> bb8_core/ble_bridge.py:256:89
    |
254 |           - power:    {base}/power/set   (payload: "ON"|"OFF")    -> {base}/power/state
255 |           - stop:     {base}/stop/press  (payload: any)           -> {base}/stop/state ("pressed" then "idle")
256 |           - led:      {base}/led/set     (json: {"r":..,"g":..,"b":..} or {"hex":"#rrggbb"} or "OFF")
    |                                                                                         ^^^^^^^^^^^^^
257 |                       -> {base}/led/state (json {"r":..,"g":..,"b":..} or {"state":"OFF"})
258 |         Telemetry publishers (you can call these from your periodic loop):
    |

E501 Line too long (90 > 88)
   --> bb8_core/ble_bridge.py:257:89
    |
255 |           - stop:     {base}/stop/press  (payload: any)           -> {base}/stop/state ("pressed" then "idle")
256 |           - led:      {base}/led/set     (json: {"r":..,"g":..,"b":..} or {"hex":"#rrggbb"} or "OFF")
257 |                       -> {base}/led/state (json {"r":..,"g":..,"b":..} or {"state":"OFF"})
    |                                                                                         ^^
258 |         Telemetry publishers (you can call these from your periodic loop):
259 |           - presence: {base}/presence/state  ("ON"|"OFF")
    |

E501 Line too long (89 > 88)
   --> bb8_core/ble_bridge.py:407:89
    |
405 |             self, client, base_topic: str, qos: int = 1, retain: bool = True
406 |         ) -> None:
407 |             """Deprecated: forwarding to facade to avoid transport concerns in bridge."""
    |                                                                                         ^
408 |             from .facade import BB8Facade  # lazy import to avoid circular import
    |

E501 Line too long (94 > 88)
   --> bb8_core/ble_bridge.py:450:89
    |
448 |             logger.debug({"event": "connect_bb8_scan_result", "device": str(device)})
449 |             if not device:
450 |                 msg = "BB-8 not found. Please tap robot or remove from charger and try again."
    |                                                                                         ^^^^^^
451 |                 publish_bb8_error(msg)
452 |                 logger.error({"event": "connect_bb8_not_found", "msg": msg})
    |

E501 Line too long (94 > 88)
   --> bb8_core/ble_bridge.py:470:89
    |
468 |                 for s in getattr(device, "services", [])
469 |             ):
470 |                 msg = "BB-8 not awake. Please tap robot or remove from charger and try again."
    |                                                                                         ^^^^^^
471 |                 publish_bb8_error(msg)
472 |                 logger.error(
    |

E501 Line too long (90 > 88)
   --> bb8_core/ble_bridge.py:596:89
    |
594 |     except Exception as e:
595 |         logger.error(
596 |             f"[BB-8][ERROR] LED command failed after {time.time() - led_start:.2f}s: {e}",
    |                                                                                         ^^
597 |             exc_info=True,
598 |         )
    |

E501 Line too long (95 > 88)
   --> bb8_core/ble_bridge.py:600:89
    |
598 |         )
599 |         logger.info(
600 |             f"[BB-8] Status after LED error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^
601 |         )
602 |         return
    |

E501 Line too long (92 > 88)
   --> bb8_core/ble_bridge.py:614:89
    |
612 |     except Exception as e:
613 |         logger.error(
614 |             f"[BB-8][ERROR] Roll command failed after {time.time() - roll_start:.2f}s: {e}",
    |                                                                                         ^^^^
615 |             exc_info=True,
616 |         )
    |

E501 Line too long (96 > 88)
   --> bb8_core/ble_bridge.py:618:89
    |
616 |         )
617 |         logger.info(
618 |             f"[BB-8] Status after roll error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^^
619 |         )
620 |         return
    |

E501 Line too long (98 > 88)
   --> bb8_core/ble_bridge.py:650:89
    |
648 |             except Exception as e:
649 |                 logger.error(
650 |                     f"[BB-8][ERROR] LED command failed after {time.time() - led_start:.2f}s: {e}",
    |                                                                                         ^^^^^^^^^^
651 |                     exc_info=True,
652 |                 )
    |

E501 Line too long (103 > 88)
   --> bb8_core/ble_bridge.py:654:89
    |
652 |                 )
653 |                 logger.info(
654 |                     f"[BB-8] Status after LED error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^^^^^^^^^
655 |                 )
656 |                 return
    |

E501 Line too long (92 > 88)
   --> bb8_core/ble_bridge.py:663:89
    |
661 |                     bb8.set_main_led(0, i, int(2.55 * i), None)
662 |                     logger.info(
663 |                         f"[BB-8] LED fade step succeeded in {time.time() - fade_start:.2f}s"
    |                                                                                         ^^^^
664 |                     )
665 |                 except Exception as e:
    |

E501 Line too long (105 > 88)
   --> bb8_core/ble_bridge.py:667:89
    |
665 |                 except Exception as e:
666 |                     logger.error(
667 |                         f"[BB-8][ERROR] LED fade step failed after {time.time() - fade_start:.2f}s: {e}",
    |                                                                                         ^^^^^^^^^^^^^^^^^
668 |                         exc_info=True,
669 |                     )
    |

E501 Line too long (108 > 88)
   --> bb8_core/ble_bridge.py:671:89
    |
669 |                     )
670 |                     logger.info(
671 |                         f"[BB-8] Status after fade error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^
672 |                     )
673 |                     return
    |

E501 Line too long (102 > 88)
   --> bb8_core/ble_bridge.py:681:89
    |
679 |             except Exception as e:
680 |                 logger.error(
681 |                     f"[BB-8][ERROR] LED off command failed after {time.time() - off_start:.2f}s: {e}",
    |                                                                                         ^^^^^^^^^^^^^^
682 |                     exc_info=True,
683 |                 )
    |

E501 Line too long (107 > 88)
   --> bb8_core/ble_bridge.py:685:89
    |
683 |                 )
684 |                 logger.info(
685 |                     f"[BB-8] Status after LED off error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^
686 |                 )
687 |                 return
    |

E501 Line too long (102 > 88)
   --> bb8_core/ble_bridge.py:694:89
    |
692 |             except Exception as e:
693 |                 logger.error(
694 |                     f"[BB-8][ERROR] Sleep command failed after {time.time() - sleep_start:.2f}s: {e}",
    |                                                                                         ^^^^^^^^^^^^^^
695 |                     exc_info=True,
696 |                 )
    |

E501 Line too long (105 > 88)
   --> bb8_core/ble_bridge.py:698:89
    |
696 |                 )
697 |                 logger.info(
698 |                     f"[BB-8] Status after sleep error: is_connected={getattr(bb8, 'is_connected', None)}"
    |                                                                                         ^^^^^^^^^^^^^^^^^
699 |                 )
700 |                 return
    |

E501 Line too long (109 > 88)
   --> bb8_core/ble_bridge.py:816:89
    |
814 |             "command_topic": f"{topic_prefix}/command",
815 |             "schema": "json",
816 |             "rgb_command_template": "{{ {'command': 'set_led', 'r': red, 'g': green, 'b': blue} | tojson }}",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^
817 |             "device": base_device,
818 |         },
    |

E501 Line too long (94 > 88)
   --> bb8_core/ble_bridge.py:884:89
    |
884 | # [2025-08-08 xx:xx] Copilot patch: BLE Watchdog, Core Entity Surfacing, and Dynamic Discovery
    |                                                                                         ^^^^^^
885 | # implemented for enhanced customization of  BB-8 control.
    |

E501 Line too long (97 > 88)
 --> bb8_core/ble_gateway.py:4:89
  |
2 | ble_gateway.py
3 |
4 | Handles BLE adapter selection, device scanning, and connection status for BB-8 device management.
  |                                                                                         ^^^^^^^^^
5 | """
  |

F811 Redefinition of unused `BLELink` from line 18
  --> bb8_core/bridge_controller.py:34:23
   |
32 | from .ble_bridge import BLEBridge
33 | from .ble_gateway import BleGateway
34 | from .ble_link import BLELink
   |                       ^^^^^^^
35 | from .common import TOPICS, publish_device_echo
36 | from .evidence_capture import EvidenceRecorder
   |
help: Remove definition: `BLELink`

E501 Line too long (92 > 88)
  --> bb8_core/bridge_controller.py:63:89
   |
61 |     Start MQTT dispatcher, pruning/aliasing kwargs to match the function signature.
62 |     Supports both legacy ('host','port','topic','user','password','controller')
63 |     and new-style ('mqtt_host','mqtt_port','mqtt_topic','username','passwd','bridge') names.
   |                                                                                         ^^^^
64 |     """
65 |     import inspect
   |

E501 Line too long (91 > 88)
   --> bb8_core/bridge_controller.py:162:89
    |
161 |     """
162 |     Bring up BLE gateway + bridge, resolve target MAC if needed, and start MQTT dispatcher.
    |                                                                                         ^^^
163 |     """
164 |     logger.info(
    |

N806 Variable `REQUIRE_DEVICE_ECHO` in function should be lowercase
   --> bb8_core/bridge_controller.py:386:5
    |
384 |     import os
385 |
386 |     REQUIRE_DEVICE_ECHO = os.environ.get("REQUIRE_DEVICE_ECHO", "1") not in (
    |     ^^^^^^^^^^^^^^^^^^^
387 |         "0",
388 |         "false",
    |

F841 Local variable `REQUIRE_DEVICE_ECHO` is assigned to but never used
   --> bb8_core/bridge_controller.py:386:5
    |
384 |     import os
385 |
386 |     REQUIRE_DEVICE_ECHO = os.environ.get("REQUIRE_DEVICE_ECHO", "1") not in (
    |     ^^^^^^^^^^^^^^^^^^^
387 |         "0",
388 |         "false",
    |
help: Remove assignment to unused variable `REQUIRE_DEVICE_ECHO`

N806 Variable `CFG` in function should be lowercase
   --> bb8_core/bridge_controller.py:487:5
    |
485 |     # Single, final version probe (no preface “missing” lines)
486 |     logging.getLogger("bb8_addon").info(probe())
487 |     CFG, SRC = load_config()
    |     ^^^
488 |     cfg = CFG
489 |     # Emit one-shot INFO banner of all active config keys and their sources
    |

N806 Variable `SRC` in function should be lowercase
   --> bb8_core/bridge_controller.py:487:10
    |
485 |     # Single, final version probe (no preface “missing” lines)
486 |     logging.getLogger("bb8_addon").info(probe())
487 |     CFG, SRC = load_config()
    |          ^^^
488 |     cfg = CFG
489 |     # Emit one-shot INFO banner of all active config keys and their sources
    |

E402 Module level import not at top of file
  --> bb8_core/common.py:23:1
   |
22 | # File: bb8_core/bridge_controller.py (wires device-echo handlers, LED, BLE)
23 | from bb8_core.common import TOPICS, publish_device_echo
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |

F811 Redefinition of unused `TOPICS` from line 11
  --> bb8_core/common.py:23:29
   |
22 | # File: bb8_core/bridge_controller.py (wires device-echo handlers, LED, BLE)
23 | from bb8_core.common import TOPICS, publish_device_echo
   |                             ^^^^^^
   |
help: Remove definition: `TOPICS`

F811 Redefinition of unused `publish_device_echo` from line 4
  --> bb8_core/common.py:23:37
   |
22 | # File: bb8_core/bridge_controller.py (wires device-echo handlers, LED, BLE)
23 | from bb8_core.common import TOPICS, publish_device_echo
   |                                     ^^^^^^^^^^^^^^^^^^^
   |
help: Remove definition: `publish_device_echo`

F821 Undefined name `client`
  --> bb8_core/common.py:28:25
   |
26 | # Replace publish with helper in handlers:
27 | def on_power_set(payload):
28 |     publish_device_echo(client, TOPICS["power"], payload)
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:32:25
   |
31 | def on_stop():
32 |     publish_device_echo(client, TOPICS["stop"], "pressed")
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:36:25
   |
35 | def on_sleep():
36 |     publish_device_echo(client, TOPICS["sleep"], "idle")
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:40:25
   |
39 | def on_drive(value):
40 |     publish_device_echo(client, TOPICS["drive"], value)
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:44:25
   |
43 | def on_heading(value):
44 |     publish_device_echo(client, TOPICS["heading"], value)
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:48:25
   |
47 | def on_speed(value):
48 |     publish_device_echo(client, TOPICS["speed"], value)
   |                         ^^^^^^
   |

F821 Undefined name `client`
  --> bb8_core/common.py:53:5
   |
51 | def on_led_set(r, g, b):
52 |     payload = json.dumps({"r": r, "g": g, "b": b})
53 |     client.publish(TOPICS["led"], payload=payload, qos=1, retain=False)
   |     ^^^^^^
   |

E402 Module level import not at top of file
  --> bb8_core/common.py:57:1
   |
56 | # BLE loop thread setup
57 | import asyncio
   | ^^^^^^^^^^^^^^
58 | import threading
   |

E402 Module level import not at top of file
  --> bb8_core/common.py:58:1
   |
56 | # BLE loop thread setup
57 | import asyncio
58 | import threading
   | ^^^^^^^^^^^^^^^^
59 |
60 | ble_loop = asyncio.new_event_loop()
   |

F821 Undefined name `dispatcher`
  --> bb8_core/common.py:73:8
   |
71 | # File: bb8_core/bb8_presence_scanner.py
72 | # Guard dispatcher init to ensure scanner is the source
73 | if not dispatcher.is_initialized():
   |        ^^^^^^^^^^
74 |     dispatcher.init("bb8")  # enforce single discovery source
   |

F821 Undefined name `dispatcher`
  --> bb8_core/common.py:74:5
   |
72 | # Guard dispatcher init to ensure scanner is the source
73 | if not dispatcher.is_initialized():
74 |     dispatcher.init("bb8")  # enforce single discovery source
   |     ^^^^^^^^^^
   |

E501 Line too long (161 > 88)
 --> bb8_core/controller.py:4:89
  |
2 | …
3 | …
4 | …tegration with Home Assistant, including BLE device management, command dispatch, and MQTT diagnostics.
  |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
5 | …
6 | …
  |

E501 Line too long (120 > 88)
  --> bb8_core/facade.py:16:89
   |
14 |     High-level, MQTT-facing API for BB-8 Home Assistant integration.
15 |
16 |     This class wraps a BLEBridge (device driver) and exposes commands, telemetry, and Home Assistant discovery via MQTT.
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
17 |
18 |     Attributes
   |

E501 Line too long (98 > 88)
   --> bb8_core/facade.py:167:89
    |
165 |     ) -> None:
166 |         """
167 |         Attach the facade to an MQTT client, subscribe to topics, and publish discovery and state.
    |                                                                                         ^^^^^^^^^^
168 |
169 |         Parameters
    |

E501 Line too long (100 > 88)
   --> bb8_core/facade.py:185:89
    |
183 |           - {base}/power/set       ("ON"|"OFF")  → {base}/power/state
184 |           - {base}/stop/press      (any payload) → {base}/stop/state ("pressed"→"idle")
185 |           - {base}/led/set         json {"r","g","b"} | {"hex":"#rrggbb"} | "OFF" → {base}/led/state
    |                                                                                         ^^^^^^^^^^^^
186 |         Telemetry helpers (bound here):
187 |           - presence: {base}/presence/state ("ON"/"OFF")
    |

N806 Variable `CFG` in function should be lowercase
   --> bb8_core/facade.py:193:9
    |
191 |         from bb8_core.addon_config import load_config
192 |
193 |         CFG, _ = load_config()
    |         ^^^
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
    |

N806 Variable `MQTT_BASE` in function should be lowercase
   --> bb8_core/facade.py:194:9
    |
193 |         CFG, _ = load_config()
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
    |         ^^^^^^^^^
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
    |

N806 Variable `HA_DISCOVERY_TOPIC` in function should be lowercase
   --> bb8_core/facade.py:195:9
    |
193 |         CFG, _ = load_config()
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
    |         ^^^^^^^^^^^^^^^^^^
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
    |

F841 Local variable `HA_DISCOVERY_TOPIC` is assigned to but never used
   --> bb8_core/facade.py:195:9
    |
193 |         CFG, _ = load_config()
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
    |         ^^^^^^^^^^^^^^^^^^
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
    |
help: Remove assignment to unused variable `HA_DISCOVERY_TOPIC`

N806 Variable `DISCOVERY_RETAIN` in function should be lowercase
   --> bb8_core/facade.py:196:9
    |
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
    |         ^^^^^^^^^^^^^^^^
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
198 |         BB8_NAME = CFG.get("BB8_NAME", "S33 BB84 LE")
    |

F841 Local variable `DISCOVERY_RETAIN` is assigned to but never used
   --> bb8_core/facade.py:196:9
    |
194 |         MQTT_BASE = CFG.get("MQTT_BASE", "bb8")
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
    |         ^^^^^^^^^^^^^^^^
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
198 |         BB8_NAME = CFG.get("BB8_NAME", "S33 BB84 LE")
    |
help: Remove assignment to unused variable `DISCOVERY_RETAIN`

N806 Variable `MQTT_CLIENT_ID` in function should be lowercase
   --> bb8_core/facade.py:197:9
    |
195 |         HA_DISCOVERY_TOPIC = CFG.get("HA_DISCOVERY_TOPIC", "homeassistant")
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
    |         ^^^^^^^^^^^^^^
198 |         BB8_NAME = CFG.get("BB8_NAME", "S33 BB84 LE")
199 |         qos_val = qos if qos is not None else CFG.get("QOS", 1)
    |

N806 Variable `BB8_NAME` in function should be lowercase
   --> bb8_core/facade.py:198:9
    |
196 |         DISCOVERY_RETAIN = CFG.get("DISCOVERY_RETAIN", True)
197 |         MQTT_CLIENT_ID = CFG.get("MQTT_CLIENT_ID", "bb8_presence_scanner")
198 |         BB8_NAME = CFG.get("BB8_NAME", "S33 BB84 LE")
    |         ^^^^^^^^
199 |         qos_val = qos if qos is not None else CFG.get("QOS", 1)
200 |         retain_val = retain if retain is not None else CFG.get("RETAIN", True)
    |

N806 Variable `REQUIRE_DEVICE_ECHO` in function should be lowercase
   --> bb8_core/facade.py:245:9
    |
243 |         import os
244 |
245 |         REQUIRE_DEVICE_ECHO = os.environ.get("REQUIRE_DEVICE_ECHO", "1") not in (
    |         ^^^^^^^^^^^^^^^^^^^
246 |             "0",
247 |             "false",
    |

E501 Line too long (98 > 88)
   --> bb8_core/logging_setup.py:115:89
    |
113 | ) -> logging.Handler:
114 |     """
115 |     Prefer LOG_PATH from config, then BB8_LOG_PATH env, then default_path, then /tmp, then stderr.
    |                                                                                         ^^^^^^^^^^
116 |     Emits one warning on fallback.
117 |     """
    |

E501 Line too long (94 > 88)
   --> bb8_core/logging_setup.py:119:89
    |
117 |     """
118 |     candidate = _cfg.get("LOG_PATH") or os.environ.get("BB8_LOG_PATH") or default_path
119 |     # Detect environment: if running in Home Assistant, /addons is present and /Volumes is not
    |                                                                                         ^^^^^^
120 |     is_ha = os.path.exists("/addons") and not os.path.exists("/Volumes")
121 |     # If running in HA and candidate starts with /Volumes, strip it
    |

E501 Line too long (91 > 88)
   --> bb8_core/logging_setup.py:132:89
    |
130 |         tmp = os.path.join(tempfile.gettempdir(), "bb8_addon.log")
131 |         print(
132 |             f"[LOGGING DEBUG] Fallback to temp log path: {tmp}, Writable: {_writable(tmp)}"
    |                                                                                         ^^^
133 |         )
134 |         candidate = tmp if _writable(tmp) else None
    |

E501 Line too long (175 > 88)
 --> bb8_core/mqtt_dispatcher.py:5:89
  |
3 | …
4 | …
5 | …ches commands to the BLE bridge/controller, and publishes status and discovery information for Home Assistant.
  |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
6 | …
7 | …
  |

E501 Line too long (89 > 88)
 --> ops/evidence/collect_stp4.py:7:89
  |
5 | Outputs:
6 |   - ha_discovery_dump.json      # retained discovery configs observed
7 |   - ha_mqtt_trace_snapshot.json # per-entity command→state traces w/ timestamps & latency
  |                                                                                         ^
8 |   - evidence_manifest.json      # summary, pass/fail attestation
9 | Exit code:
  |

E501 Line too long (100 > 88)
  --> ops/evidence/collect_stp4.py:28:89
   |
26 | except ImportError:
27 |     # Fallback assignment: If the import fails, set load_config to None.
28 |     # This allows the script to run outside the package context where bb8_core may not be available.
   |                                                                                         ^^^^^^^^^^^^
29 |     load_config = None
   |

E501 Line too long (159 > 88)
  --> ops/evidence/collect_stp4.py:39:89
   |
37 | …
38 | …
39 | …failed: {e}. This usually means the virtual environment is not activated or dependencies are missing."
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
40 | …
41 | …-mqtt", file=sys.stderr)
   |

E501 Line too long (135 > 88)
  --> ops/evidence/collect_stp4.py:57:89
   |
55 |             logging.basicConfig(level=logging.WARNING)
56 |             logging.warning(
57 |                 f"[CONFIG] Config loader failed: {e}. This may indicate a missing config file, broken loader, or missing dependencies."
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
58 |             )
59 |             print(f"[ERROR] Failed to load config: {e}", file=sys.stderr)
   |

E501 Line too long (118 > 88)
  --> ops/evidence/collect_stp4.py:62:89
   |
60 |             return {}
61 |     logging.warning(
62 |         "[CONFIG] load_config is not available. This usually means the module import failed or PYTHONPATH is not set."
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
63 |     )
64 |     return {}
   |

E501 Line too long (89 > 88)
   --> ops/evidence/collect_stp4.py:286:89
    |
284 |                 for m in reversed(self.msg_log):
285 |                     if m["topic"] == topic and predicate(m):
286 |                         # Only accept state with ts >= command_ts (reject stale/prestate)
    |                                                                                         ^
287 |                         return self._extract_state(m)
288 |         return None
    |

E722 Do not use bare `except`
   --> ops/evidence/collect_stp4.py:321:13
    |
319 |             try:
320 |                 self.client.disconnect()
321 |             except:
    |             ^^^^^^
322 |                 pass
    |

E501 Line too long (96 > 88)
   --> ops/evidence/collect_stp4.py:417:89
    |
415 | …                     ):
416 | …                         passed, note_val = True, ""
417 | …                     # 3) JSON with {"value": ...} vs raw expect (strings or numbers)
    |                                                                               ^^^^^^^^
418 | …                     elif (
419 | …                         isinstance(j_echo, dict)
    |

E501 Line too long (185 > 88)
   --> ops/evidence/collect_stp4.py:447:89
    |
445 | …/set")
446 | …
447 | …EVICE_ECHO')}, require_device={require_device}, is_commandable={is_commandable}, echo_source={echo.get('source')}"
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
448 | …
449 | …ce") != "device":
    |

E501 Line too long (284 > 88)
  --> ops/evidence/evidence_capture.py:11:89
   |
10 | …
11 | …hing not "device" becomes facade_only). That logic is sound—keep it. Use REQUIRE_DEVICE_ECHO=0 while the shim stands in, then flip to 1 for real hardware acceptance. (See the env/logic in record(...).)
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
12 | …
   |

E501 Line too long (96 > 88)
  --> scan_bb8_gatt.py:35:89
   |
33 |     if not device:
34 |         print(
35 |             "BB-8 not found. Is it awake and advertising? Try tapping or removing from charger."
   |                                                                                         ^^^^^^^^
36 |         )
37 |         return
   |

E501 Line too long (96 > 88)
  --> scan_bb8_gatt.py:47:89
   |
45 |                 props = ",".join(char.properties)
46 |                 print(
47 |                     f"  [Characteristic] {char.uuid} | {char.description} | properties: {props}"
   |                                                                                         ^^^^^^^^
48 |                 )
   |

E501 Line too long (112 > 88)
  --> tests/conftest.py:9:89
   |
 8 | # Provide a stable event loop for tests that touch asyncio/BLE helpers.
 9 | # With asyncio_mode=auto this is usually not necessary, but it guards environments where plugin policies differ.
   |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
10 | @pytest.fixture(scope="session")
11 | def event_loop():
   |

N812 Lowercase `facade` imported as non-lowercase `F`
  --> tests/test_facade.py:27:12
   |
26 | def test_sleep_mapping(monkeypatch):
27 |     import bb8_core.facade as F
   |            ^^^^^^^^^^^^^^^^^^^^
28 |
29 |     monkeypatch.setattr(F, "Core", StubCore)
   |

N812 Lowercase `facade` imported as non-lowercase `F`
  --> tests/test_facade.py:37:12
   |
36 | def test_led_set_immediate(monkeypatch):
37 |     import bb8_core.facade as F
   |            ^^^^^^^^^^^^^^^^^^^^
38 |
39 |     monkeypatch.setattr(F, "Core", StubCore)
   |

N812 Lowercase `facade` imported as non-lowercase `F`
  --> tests/test_facade.py:48:12
   |
47 | def test_led_fade_steps(monkeypatch):
48 |     import bb8_core.facade as F
   |            ^^^^^^^^^^^^^^^^^^^^
49 |
50 |     monkeypatch.setattr(F, "Core", StubCore)
   |

N812 Lowercase `facade` imported as non-lowercase `F`
  --> tests/test_facade.py:65:12
   |
64 | def test_drive_autostop(monkeypatch):
65 |     import bb8_core.facade as F
   |            ^^^^^^^^^^^^^^^^^^^^
66 |
67 |     monkeypatch.setattr(F, "Core", StubCore)
   |

F841 Local variable `dummy_cfg` is assigned to but never used
  --> tests/test_smoke_controller_facade.py:12:9
   |
11 |         # Construct dummy config and bridge
12 |         dummy_cfg = {"bb8_mac": "ED:ED:87:D7:27:50", "ble_adapter": "hci0"}
   |         ^^^^^^^^^
13 |
14 |         class DummyBridge:
   |
help: Remove assignment to unused variable `dummy_cfg`

Found 130 errors.
No fixes available (6 hidden fixes can be enabled with the `--unsafe-fixes` option).
