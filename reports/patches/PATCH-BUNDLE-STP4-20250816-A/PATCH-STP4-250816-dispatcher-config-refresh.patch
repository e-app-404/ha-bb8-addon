diff --git a/bb8_core/mqtt_dispatcher.py b/bb8_core/mqtt_dispatcher.py
index 7aa2a55..fd2a4d1 100644
--- a/bb8_core/mqtt_dispatcher.py
+++ b/bb8_core/mqtt_dispatcher.py
@@ -1,13 +1,16 @@
 from __future__ import annotations

 import logging
-from typing import Any, Optional
-from .addon_config import CONFIG
+from typing import Any, Optional
+from .addon_config import CONFIG, CONFIG_SOURCE, init_config
 import json
 from .common import CMD_TOPICS, STATE_TOPICS

 log = logging.getLogger(__name__)

 _DISPATCHER_STARTED: bool = False
@@
-def ensure_dispatcher_started(*args: Any, **kwargs: Any) -> bool:
+def ensure_dispatcher_started(*args: Any, **kwargs: Any) -> bool:
     """
     Idempotently start the MQTT dispatcher. Returns True if running after call.
     Accepts arbitrary args/kwargs to pass through to start_mqtt_dispatcher().
     """
     global _DISPATCHER_STARTED
     if _DISPATCHER_STARTED:
         return True
     try:
-        # Bind from effective config unless explicitly overridden.
-        host = kwargs.pop("host", CONFIG.get("mqtt_broker") or CONFIG.get("MQTT_HOST") or "127.0.0.1")
-        port = kwargs.pop("port", CONFIG.get("mqtt_port") or CONFIG.get("MQTT_PORT") or 1883)
-        username = kwargs.pop("username", CONFIG.get("mqtt_username") or CONFIG.get("MQTT_USERNAME"))
-        password = kwargs.pop("password", CONFIG.get("mqtt_password") or CONFIG.get("MQTT_PASSWORD"))
-        topic = kwargs.pop("topic", CONFIG.get("mqtt_topic_prefix") or CONFIG.get("MQTT_BASE") or "bb8")
-        client_id = kwargs.pop("client_id", CONFIG.get("mqtt_client_id") or "bb8-addon")
-        creds = dict(username=username, password=password)
-        user_flag = bool(username)
-
-        log.info("Dispatcher config: host=%s port=%s user=%s topic=%s client_id=%s",
-                 host, port, user_flag, topic, client_id)
-        start_mqtt_dispatcher(host=host, port=port, client_id=client_id, topic=topic, **creds)  # type: ignore[name-defined]
+        # Refresh CONFIG so we never use stale values
+        init_config()
+
+        # Resolve from kwargs first (explicit override), else CONFIG
+        host = kwargs.pop("mqtt_host", None)
+        port = kwargs.pop("mqtt_port", None)
+        topic = kwargs.pop("mqtt_topic", None)
+        username = kwargs.pop("username", None)
+        password = kwargs.pop("password", None)
+        client_id = kwargs.pop("client_id", None)
+
+        if host is None:
+            host = CONFIG.get("MQTT_HOST") or CONFIG.get("mqtt_broker")
+        if port is None:
+            port = CONFIG.get("MQTT_PORT") or CONFIG.get("mqtt_port")
+        if topic is None:
+            topic = CONFIG.get("MQTT_BASE") or CONFIG.get("mqtt_topic_prefix") or "bb8"
+        if username is None:
+            username = CONFIG.get("MQTT_USERNAME") or CONFIG.get("mqtt_username")
+        if password is None:
+            password = CONFIG.get("MQTT_PASSWORD") or CONFIG.get("mqtt_password")
+        if client_id is None:
+            client_id = CONFIG.get("mqtt_client_id") or "bb8-addon"
+
+        # Final fallbacks (only if truly unset)
+        if host is None:
+            host = "127.0.0.1"
+        if port is None:
+            port = 1883
+
+        user_flag = bool(username)
+        log.info(
+            "Dispatcher config (resolved): host=%s port=%s user=%s topic=%s "
+            "client_id=%s source=%s",
+            host,
+            port,
+            user_flag,
+            topic,
+            client_id,
+            CONFIG_SOURCE,
+        )
+
+        # Pass explicit params so start_mqtt_dispatcher does not fallback
+        start_mqtt_dispatcher(  # type: ignore[name-defined]
+            mqtt_host=host,
+            mqtt_port=int(port),
+            mqtt_topic=topic,
+            client_id=client_id,
+            username=username,
+            password=password,
+        )
         _DISPATCHER_STARTED = True
         log.info("MQTT dispatcher started.")
         return True
     except Exception as exc:  # noqa: BLE001 (broad except for boot guard)
         log.error("Failed to start MQTT dispatcher: %s", exc)
         return False
