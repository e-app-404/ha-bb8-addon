diff --git a/bb8_core/mqtt_dispatcher.py b/bb8_core/mqtt_dispatcher.py
index fd2a4d1..8d9f2c3 100644
--- a/bb8_core/mqtt_dispatcher.py
+++ b/bb8_core/mqtt_dispatcher.py
@@ -1,16 +1,19 @@
 from __future__ import annotations

 import logging
-from typing import Any, Optional
-from .addon_config import CONFIG, CONFIG_SOURCE, init_config
+from typing import Any, Optional, Tuple
+from .addon_config import CONFIG, CONFIG_SOURCE, init_config
 import json
 from .common import CMD_TOPICS, STATE_TOPICS

 log = logging.getLogger(__name__)

 _DISPATCHER_STARTED: bool = False
+_START_KEY: Optional[Tuple[str, int, str, str, bool]] = None  # (host,port,topic,client_id,user_present)

@@
 def ensure_dispatcher_started(*args: Any, **kwargs: Any) -> bool:
@@
-        # Pass explicit params so start_mqtt_dispatcher does not fallback
-        start_mqtt_dispatcher(  # type: ignore[name-defined]
+        # Pass explicit params so start_mqtt_dispatcher does not fallback
+        start_mqtt_dispatcher(  # type: ignore[name-defined]
             mqtt_host=host,
             mqtt_port=int(port),
             mqtt_topic=topic,
             client_id=client_id,
             username=username,
             password=password,
         )
         _DISPATCHER_STARTED = True
         log.info("MQTT dispatcher started.")
         return True
@@
 def main():
     ...

+# -----------------------------------------------------------------------------
+# Guarded start wrapper to prevent duplicate/divergent dispatcher starts
+# -----------------------------------------------------------------------------
+def _compute_key(
+    host: Any, port: Any, topic: Any, client_id: Any, username: Any
+) -> Tuple[str, int, str, str, bool]:
+    return (str(host), int(port), str(topic), str(client_id), bool(username))
+
+
+# Keep a reference to the original starter (defined in this module)
+_orig_start_mqtt_dispatcher = None
+try:
+    _orig_start_mqtt_dispatcher = start_mqtt_dispatcher  # type: ignore[name-defined]
+except Exception:
+    _orig_start_mqtt_dispatcher = None
+
+
+def _guarded_start_mqtt_dispatcher(
+    *,  # enforce kw-only like the existing function
+    mqtt_host: Optional[str] = None,
+    mqtt_port: Optional[int] = None,
+    mqtt_topic: Optional[str] = None,
+    client_id: Optional[str] = None,
+    username: Optional[str] = None,
+    password: Optional[str] = None,
+    **kwargs: Any,
+) -> Any:
+    """
+    Wrapper that resolves config if args are omitted, enforces a singleton,
+    and suppresses divergent re-starts (e.g., localhost) after a proper start.
+    """
+    global _DISPATCHER_STARTED, _START_KEY
+    init_config()  # ensure CONFIG/CONFIG_SOURCE are fresh
+
+    host = mqtt_host or CONFIG.get("MQTT_HOST") or CONFIG.get("mqtt_broker") or "127.0.0.1"
+    port = int(mqtt_port or CONFIG.get("MQTT_PORT") or CONFIG.get("mqtt_port") or 1883)
+    topic = mqtt_topic or CONFIG.get("MQTT_BASE") or CONFIG.get("mqtt_topic_prefix") or "bb8"
+    cid = client_id or CONFIG.get("mqtt_client_id") or "bb8-addon"
+    user = username or CONFIG.get("MQTT_USERNAME") or CONFIG.get("mqtt_username")
+    pwd = password or CONFIG.get("MQTT_PASSWORD") or CONFIG.get("mqtt_password")
+
+    key = _compute_key(host, port, topic, cid, user)
+
+    if _DISPATCHER_STARTED:
+        if _START_KEY == key:
+            log.info(
+                "MQTT dispatcher already running with same config; suppressing duplicate start "
+                "(host=%s port=%s topic=%s client_id=%s).",
+                host, port, topic, cid,
+            )
+            return True
+        # Divergent re-start attempt (e.g., localhost) â€” suppress and warn.
+        log.warning(
+            "Suppressed divergent MQTT dispatcher start: new(host=%s port=%s topic=%s client_id=%s) "
+            "existing(host=%s port=%s topic=%s client_id=%s).",
+            host, port, topic, cid, *(_START_KEY or ("?", 0, "?", "?"))
+        )
+        return True
+
+    log.info(
+        "Dispatcher config (guarded start): host=%s port=%s user=%s topic=%s client_id=%s source=%s",
+        host, port, bool(user), topic, cid, CONFIG_SOURCE,
+    )
+    if _orig_start_mqtt_dispatcher is None:
+        log.error("Original start_mqtt_dispatcher not found; cannot start dispatcher.")
+        return False
+    res = _orig_start_mqtt_dispatcher(  # type: ignore[misc]
+        mqtt_host=host,
+        mqtt_port=port,
+        mqtt_topic=topic,
+        client_id=cid,
+        username=user,
+        password=pwd,
+        **kwargs,
+    )
+    _DISPATCHER_STARTED = True
+    _START_KEY = key
+    return res
+
+
+# Replace the public symbol so *all* callers go through the guard.
+start_mqtt_dispatcher = _guarded_start_mqtt_dispatcher  # type: ignore[assignment]
+
 # Explicit export set (helps linters/import tools)
 __all__ = [
     "is_dispatcher_started",
     "ensure_dispatcher_started",
     "start_mqtt_dispatcher",
     "turn_on_bb8",
     "turn_off_bb8",
     "main",
 ]
