# Patch ID: PATCH-STP4-250815-led-discovery
diff --git a/bb8_core/mqtt_dispatcher.py b/bb8_core/mqtt_dispatcher.py
index 7aa2a55..8b5af99 100644
--- a/bb8_core/mqtt_dispatcher.py
+++ b/bb8_core/mqtt_dispatcher.py
@@ -1,9 +1,11 @@
 from __future__ import annotations

 import logging
 from typing import Any, Optional
 from .addon_config import CONFIG
+import json
+from .common import CMD_TOPICS, STATE_TOPICS

 log = logging.getLogger(__name__)

@@
         log.info("Dispatcher config: host=%s port=%s user=%s topic=%s client_id=%s",
                  host, port, user_flag, topic, client_id)
         start_mqtt_dispatcher(host=host, port=port, client_id=client_id, topic=topic, **creds)  # type: ignore[name-defined]
         _DISPATCHER_STARTED = True
         log.info("MQTT dispatcher started.")
         return True
@@
 def main():
     ...
+
+# ---- Optional: LED discovery (gated by config) ------------------------------
+# Verify if dispatcher already has a generic discovery publisher,
+# adapt the function body to call it (most systems expose a client.publish wrapper).
+def publish_led_discovery(publish_fn) -> None:
+    """
+    Publish HA discovery for RGB LED if enabled. `publish_fn(topic, payload, retain)`
+    should publish to MQTT. Retain flag follows CONFIG['discovery_retain'].
+    """
+    if not CONFIG.get("dispatcher_discovery_enabled", False):
+        return
+    retain = bool(CONFIG.get("discovery_retain", False))
+    ha_prefix = CONFIG.get("ha_discovery_topic", "homeassistant")
+    obj_id = "bb8_led"
+    cfg_topic = f"{ha_prefix}/light/{obj_id}/config"
+    cfg = {
+        "name": "BB8 LED",
+        "uniq_id": obj_id,
+        "schema": "json",
+        "cmd_t": CMD_TOPICS["led"],
+        "stat_t": STATE_TOPICS["led"],
+        "rgb": True,
+        "qos": int(CONFIG.get("qos", 1)),
+        "dev": {"ids": ["bb8"], "name": "BB-8", "mf": "Sphero"},
+    }
+    publish_fn(cfg_topic, json.dumps(cfg), retain)
+    log.info("Published LED discovery: %s", cfg_topic)
