## 1) Force the runtime to call the patched scanner module

### Please patch: `bb8_core/mqtt_dispatcher.py`

* **Guarantee `_trigger_discovery_connected()` uses `_get_scanner_module()`**—no inline imports, no cached aliases, no `from … import …` references.
* **Remove any globals** like `_SCANNER` or `_scanner` if present.
* **Add a “which module” log** (`scanner_mod name=… file=… id=…`) so we can assert it in tests.

**Unified diff (conceptual; apply to your file):**

```diff
@@
-# any previous imports or aliasing of bb8_presence_scanner must be removed
+import sys
+import importlib
+import inspect
+import logging
+import os
+log = logging.getLogger(__name__)
@@
+def _get_scanner_module():
+    """Return the live scanner module that contains publish_discovery."""
+    m1 = sys.modules.get("bb8_core.bb8_presence_scanner")
+    if m1 is not None and hasattr(m1, "publish_discovery"):
+        return m1
+    try:
+        return importlib.import_module("bb8_core.bb8_presence_scanner")
+    except ImportError:
+        # Optional: fallback only if you do support a top-level module in some envs
+        return importlib.import_module("bb8_presence_scanner")
@@
 def _trigger_discovery_connected() -> None:
     if _telemetry_enabled():
         log.info("discovery_route=scanner reason=ENABLE_BRIDGE_TELEMETRY")
         try:
-            mod = importlib.import_module("bb8_core.bb8_presence_scanner")  # or any other inline import
+            mod = _get_scanner_module()
             log.info(
-                "scanner_mod_file=%s id=%s",
-                getattr(mod, "__file__", None),
-                id(mod),
+                "scanner_mod name=%s file=%s id=%s",
+                getattr(mod, "__name__", None),
+                getattr(mod, "__file__", None),
+                id(mod),
             )
             func = getattr(mod, "publish_discovery", None)
             if not callable(func):
                 log.warning("discovery_skip reason=scanner_publish_missing")
                 return
             # keep the existing pytest/arg-introspection branch with JSON-safe dummies
             try:
                 func()
                 log.info("discovery_scanner_called_without_args=true")
                 return
             except TypeError as te:
                 if "PYTEST_CURRENT_TEST" in os.environ:
                     args = _pytest_args_for(func)  # your helper that returns _StubClient + safe strings
                     func(*args)
                     log.info("discovery_scanner_called_with_dummy_args=true count=%d", len(args))
                     return
                 log.info("discovery_skip reason=scanner_publish_requires_args err=%s", te)
         except Exception as e:
             log.warning("discovery_skip reason=scanner_import_or_call_failed err=%s", e)
     else:
         log.info("discovery_route=dispatcher reason=DEFAULT")
         _maybe_publish_bb8_discovery()
```

**Also**: search `mqtt_dispatcher.py` for **any** remaining references like:

* `from bb8_core import bb8_presence_scanner as _scanner`
* `import bb8_presence_scanner as _scanner`
* `_scanner.publish_discovery(...)`
  …and replace those call sites with `_trigger_discovery_connected()` so the single path is authoritative.

---
