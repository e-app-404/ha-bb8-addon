# Patch ID: PATCH-STP4-250815-ble-loop-runner-v2
diff --git a/bb8_core/ble_link.py b/bb8_core/ble_link.py
index 6a3a6e2..8c11dcb 100644
--- a/bb8_core/ble_link.py
+++ b/bb8_core/ble_link.py
@@ -1,43 +1,132 @@
-from __future__ import annotations
-
-import asyncio
-from typing import Optional
-
-# Dedicated loop supplied by bridge_controller; avoids get_event_loop warnings.
-_loop: Optional[asyncio.AbstractEventLoop] = None
-
-
-def set_loop(loop: asyncio.AbstractEventLoop) -> None:
-    global _loop
-    _loop = loop
-
-
-def run_coro(coro) -> asyncio.Future:
-    if _loop is None:
-        raise RuntimeError("BLE loop not set; call set_loop() first")
-    return asyncio.run_coroutine_threadsafe(coro, _loop)
+from __future__ import annotations
+
+import asyncio
+import logging
+from concurrent.futures import Future
+from typing import Optional, Callable, Awaitable
+
+log = logging.getLogger(__name__)
+
+# Dedicated loop supplied by bridge_controller.
+_loop: Optional[asyncio.AbstractEventLoop] = None
+_runner_future: Optional[Future] = None
+_started: bool = False
+
+
+def set_loop(loop: asyncio.AbstractEventLoop) -> None:
+    """Inject the dedicated BLE loop (created in a separate thread)."""
+    global _loop
+    _loop = loop
+
+
+async def _run() -> None:
+    """
+    BLE worker main coroutine.
+    Must only be scheduled on the dedicated loop.
+    """
+    backoff = [0.1, 0.2, 0.5, 1.0, 2.0]
+    i = 0
+    try:
+        while True:
+            # ... BLE connect/IO logic ...
+            await asyncio.sleep(backoff[min(i, 4)])
+            i = min(i + 1, 4)
+    except asyncio.CancelledError:
+        log.info("BLE worker cancelled; shutting down cleanly.")
+        raise
+
+
+def start() -> None:
+    """Idempotently start the BLE worker on the dedicated loop."""
+    global _runner_future, _started
+    if _started:
+        return
+    if _loop is None:
+        raise RuntimeError("BLE loop not set; call set_loop() before start()")
+    _runner_future = asyncio.run_coroutine_threadsafe(_run(), _loop)
+    _started = True
+    log.info("BLE link runner started.")
+
+
+def stop(timeout: float = 2.5) -> None:
+    """Cancel the BLE worker and wait for clean shutdown."""
+    global _runner_future, _started
+    fut = _runner_future
+    _runner_future = None
+    _started = False
+    if fut and not fut.done():
+        fut.cancel()
+        try:
+            fut.result(timeout=timeout)
+        except asyncio.CancelledError:
+            pass
+        except Exception as exc:  # noqa: BLE001
+            log.warning("BLE runner stop wait raised: %s", exc)
+
+
+def run_coro(coro: Awaitable) -> Future:
+    """Schedule an awaitable on the dedicated BLE loop."""
+    if _loop is None:
+        raise RuntimeError("BLE loop not set; call set_loop() first")
+    return asyncio.run_coroutine_threadsafe(coro, _loop)
