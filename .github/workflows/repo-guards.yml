name: repo-guards

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'addon/**'
      - '.github/workflows/repo-guards.yml'
      - 'pyproject.toml'
      - 'requirements*.txt'
  push:
    branches: [ fix/**, feature/**, bugfix/** ]
    paths:
      - 'addon/**'
      - '.github/workflows/repo-guards.yml'

permissions:
  contents: read

concurrency:
  group: repo-guards-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Structure guard (ADR-0001 + CRTP)
        run: |
          set -euo pipefail
          WORKSPACE_ROOT="${WORKSPACE_ROOT:-$GITHUB_WORKSPACE}"
          cd "$WORKSPACE_ROOT"
          # addon/ must exist and NOT be a git repo
          test -d "addon" || { echo "DRIFT:addon_missing" >&2; exit 2; }
          test -d "addon/.git" && { echo "DRIFT:addon_nested_git" >&2; exit 3; }

          # runtime check is optional; if present, it must NOT be a git repo
          if [ -n "${RUNTIME_MOUNT:-}" ] && [ -d "$RUNTIME_MOUNT" ]; then
            test -d "$RUNTIME_MOUNT/.git" && { echo "DRIFT:runtime_nested_git:$RUNTIME_MOUNT" >&2; exit 4; }
            echo "TOKEN: RUNTIME_SCAN_OK"
          else
            echo "INFO: runtime mount not present; skipping runtime git checks"
          fi

          # Forbidden workspace-only dirs always
          for d in .github docs ops reports addon; do
            if [ -e "addon/$d" ]; then echo "DRIFT:forbidden_in_addon:$d" >&2; exit 4; fi
          done

          # Required files
          test -f addon/config.yaml || { echo "DRIFT:missing_config_yaml" >&2; exit 5; }

          # Mode detection: LOCAL_DEV (no image) vs PUBLISH (image present)
          if grep -Eq '^[[:space:]]*image:[[:space:]]*' addon/config.yaml; then
            echo "MODE: PUBLISH"
            grep -Eq '^[[:space:]]*version:[[:space:]]*' addon/config.yaml || (echo "DRIFT:version_missing_in_publish_mode" >&2; exit 7)
          else
            echo "MODE: LOCAL_DEV"
            test -f addon/Dockerfile || { echo "DRIFT:dockerfile_missing_in_local_dev" >&2; exit 8; }
            echo "TOKEN: DEV_LOCAL_BUILD_FORCED"
          fi

          # CRTP: tools/ allowed only if referenced in Dockerfile or marker present
          if [ -d addon/tools ]; then
            if ! grep -Ei '(COPY|ADD|RUN|ENTRYPOINT|CMD).*tools/' addon/Dockerfile >/dev/null 2>&1 \
               && [ ! -f addon/.allow_runtime_tools ]; then
              echo "DRIFT:tools_unreferenced_in_dockerfile" >&2; exit 8
            else
              echo "TOKEN: TOOLS_ALLOWED"
            fi
          fi

          # CRTP: scripts/ allowed only if referenced in Dockerfile or marker present
          if [ -d addon/scripts ]; then
            if ! grep -Ei '(COPY|ADD|RUN|ENTRYPOINT|CMD).*scripts/' addon/Dockerfile >/dev/null 2>&1 \
               && [ ! -f addon/.allow_runtime_scripts ]; then
              echo "DRIFT:scripts_unreferenced_in_dockerfile" >&2; exit 9
            else
              echo "TOKEN: SCRIPTS_ALLOWED"
            fi
          fi
          echo "TOKEN: STRUCTURE_OK"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dev dependencies
        run: |
          python -m pip install -U pip wheel
          pip install -e addon
          if [ -f addon/requirements-dev.txt ]; then pip install -r addon/requirements-dev.txt; fi

      - name: Test hygiene (clean caches)
        run: |
          find addon -type d -name '__pycache__' -prune -exec rm -rf {} + || true
          find addon -type f -name '*.py[co]' -delete || true

      - name: Duplicate test detector
        run: |
          python - << 'PY'
          import sys, pathlib
          root = pathlib.Path('addon/tests')
          seen, dups = {}, []
          if root.exists():
              for p in root.rglob('test_*.py'):
                  stem = p.stem
                  if stem in seen:
                      dups.append((str(seen[stem]), str(p)))
                  else:
                      seen[stem] = p
          if dups:
              print('DRIFT: duplicate_test_modules', file=sys.stderr)
              for a,b in dups:
                  print(' -', a, '<->', b, file=sys.stderr)
              sys.exit(10)
          print('TOKEN: VERIFY_HYGIENE_OK')
          PY

      - name: Pytest (warnings as errors)
        env:
          PYTHONWARNINGS: "error,ignore:.*callback API version 1 deprecated.*:DeprecationWarning:paho"
        run: |
          pytest -q -W error --maxfail=1 \
            --cov=bb8_core --cov-report=xml:coverage.xml --cov-report=term-missing \
            --junitxml=pytest-report.xml

      - name: Emit CI tokens
        run: |
          echo '{"tokens":["STRUCTURE_OK","VERIFY_OK"]}' > tokens.ci.json
          cat tokens.ci.json

      - name: Upload CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: repo-guards-artifacts
          path: |
            tokens.ci.json
            coverage.xml
            pytest-report.xml
            .pytest_cache/**/*
            htmlcov/**/*

      - name: Job Summary
        if: always()
        run: |
          echo "### Repo Guards Tokens" >> $GITHUB_STEP_SUMMARY
          echo "\n\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat tokens.ci.json >> $GITHUB_STEP_SUMMARY
          echo "\n\`\`\`" >> $GITHUB_STEP_SUMMARY
          # Surface mode guard decision
          if grep -Eq '^[[:space:]]*image:[[:space:]]*' addon/config.yaml; then
            echo 'MODE: PUBLISH' >> "$GITHUB_STEP_SUMMARY"
          else
            echo 'MODE: LOCAL_DEV' >> "$GITHUB_STEP_SUMMARY"
          fi

