#══════════════════════════════════════════════════════════════════════════════
# ⟫⟫ UNIVERSAL MEDIA PACKAGE • All-in-one logic, scripts, automations, sensors
# ⟫⟫ package_universal_media.yaml  •  packages: !include_dir_named packages
# ⟫⟫ Tier: σ  •  Subsystem: orpheus  •  Updated: 2025-08-18
#══════════════════════════════════════════════════════════════════════════════

# ═══ SENSORS & LOGIC ═══
template:
  - sensor:
      - name: "Bedroom Matrix – Last Route"
        unique_id: "bedroom_matrix_last_route"
        state: >-
          A: {{
            states('input_select.bedroom_matrix_video_source') 
            if states('input_select.bedroom_matrix_video_source') not in ['unknown', 'unavailable'] 
            else '—'
          }} | B: {{
            states('input_select.bedroom_matrix_audio_source') 
            if states('input_select.bedroom_matrix_audio_source') not in ['unknown', 'unavailable'] 
            else '—'
          }}
        attributes:
          mode: "{{ states('input_select.bedroom_matrix_mode') }}"
          last_command: "{{ states('input_text.bedroom_matrix_last_command') }}"
          last_updated: "{{ states('input_datetime.bedroom_matrix_last_updated') }}"

  - binary_sensor:
      - name: "Bedroom Matrix – Aligned"
        unique_id: "bedroom_matrix_aligned"
        state: >-
          {{ is_state('input_select.bedroom_matrix_video_source',
                      states('input_select.bedroom_matrix_audio_source')) }}

# ═══ SCRIPTS ═══
script:
  matrix_control:
    alias: "HDMI Matrix – Control (modular, hardened)"
    mode: single
    fields:
      remote:
        description: Broadlink remote entity_id
      device:
        description: Broadlink device name
      tv:
        description: TV media_player to turn on
      turn_on_tv:
        default: true
        selector:
          boolean:
      repeats:
        default: 0
        selector:
          number:
            min: 0
            max: 3
            mode: slider
      command:
        description: RAW IR command
      source:
        selector:
          select:
            options:
              - Apple TV
              - Playstation 4
              - Nintendo Switch
              - Nintendo Wii
      video_source:
        selector:
          select:
            options:
              - Apple TV
              - Playstation 4
              - Nintendo Switch
              - Nintendo Wii
      audio_source:
        selector:
          select:
            options:
              - Apple TV
              - Playstation 4
              - Nintendo Switch
              - Nintendo Wii
      mode:
        description: Force raw/align/route mode
    sequence:
      - variables:
          _remote: "{{ remote | default('remote.bedroom_broadlink_rm3_alpha') }}"
          _device: "{{ device | default('bedroom_hdmi_matrix') }}"
          _tv: "{{ tv | default('media_player.bedroom_tv_alpha') }}"
          _map:
            "Apple TV": "1"
            "Playstation 4": "3"
            "Nintendo Switch": "2"
            "Nintendo Wii": "4"
          _mode: >-
            {% if mode | default('') | trim %}
              {{ mode | trim }}
            {% elif command | default('') | trim %}
              raw
            {% elif video_source | default('') | string and audio_source | default('') | string %}
              route
            {% elif source | default('') | string %}
              align
            {% else %}
              raw
            {% endif %}

      - if: "{{ turn_on_tv | default(true) }}"
        then:
          - action: media_player.turn_on
            target:
              entity_id: "{{ _tv }}"

      - choose:
          - conditions: "{{ _mode == 'raw' }}"
            sequence:
              - action: remote.send_command
                target:
                  entity_id: "{{ _remote }}"
                data:
                  device: "{{ _device }}"
                  command: "{{ command }}"
                  num_repeats: "{{ repeats }}"
              - action: script.update_bedroom_matrix_state
                data:
                  mode: raw
                  last_command: "{{ command }}"

          - conditions: "{{ _mode == 'align' }}"
            sequence:
              - variables:
                  n: "{{ _map.get(source, '0') }}"
              - action: remote.send_command
                target:
                  entity_id: "{{ _remote }}"
                data:
                  device: "{{ _device }}"
                  command: "a_{{ n }}"
                  num_repeats: "{{ repeats }}"
              - action: remote.send_command
                target:
                  entity_id: "{{ _remote }}"
                data:
                  device: "{{ _device }}"
                  command: "b_{{ n }}"
                  num_repeats: "{{ repeats }}"
              - action: script.update_bedroom_matrix_state
                data:
                  mode: aligned
                  video_source: "{{ source }}"
                  audio_source: "{{ source }}"
                  last_command: "align: {{ source }}"

          - conditions: "{{ _mode == 'route' }}"
            sequence:
              - variables:
                  v: "{{ _map.get(video_source, '0') }}"
                  a: "{{ _map.get(audio_source, '0') }}"
              - action: remote.send_command
                target:
                  entity_id: "{{ _remote }}"
                data:
                  device: "{{ _device }}"
                  command: "a_{{ v }}"
                  num_repeats: "{{ repeats }}"
              - action: remote.send_command
                target:
                  entity_id: "{{ _remote }}"
                data:
                  device: "{{ _device }}"
                  command: "b_{{ a }}"
                  num_repeats: "{{ repeats }}"
              - action: script.update_bedroom_matrix_state
                data:
                  mode: split
                  video_source: "{{ video_source }}"
                  audio_source: "{{ audio_source }}"
                  last_command: "A: {{ video_source }} | B: {{ audio_source }}"

  update_bedroom_matrix_state:
    alias: "Update Bedroom Matrix – State (hardened)"
    # unique_id removed (not supported)
    mode: single
    fields:
      mode:
        description: "aligned | split | raw"
      video_source:
        description: "Apple TV | Playstation 4 | Nintendo Switch | Nintendo Wii"
      audio_source:
        description: "Apple TV | Playstation 4 | Nintendo Switch | Nintendo Wii"
      last_command:
        description: "Label (e.g. A:Apple TV | B:PS4, power, arc)"
    sequence:
      - variables:
          _map: >-
            {{
              {
                'Playstation 4':'Playstation 4',
                'PS4':'Playstation 4',
                'Sony Playstation 4':'Playstation 4',
                '— unknown —':'Unknown',
                '— select —':'Unknown',
                'unknown':'Unknown',
                'Unknown':'Unknown',
                'Apple TV':'Apple TV',
                'Nintendo Switch':'Nintendo Switch',
                'Nintendo Wii':'Nintendo Wii'
              }
            }}
          _v_in: "{{ (video_source | default('')) | trim }}"
          _a_in: "{{ (audio_source | default('')) | trim }}"
          _v_norm: "{{ _map.get(_v_in, _v_in) }}"
          _a_norm: "{{ _map.get(_a_in, _a_in) }}"
          _v_safe: >-
            {{
              _v_norm if _v_norm in (state_attr('input_select.bedroom_matrix_video_source', 'options') or [])
              else 'Unknown'
            }}
          _a_safe: >-
            {{
              _a_norm if _a_norm in (state_attr('input_select.bedroom_matrix_audio_source', 'options') or [])
              else 'Unknown'
            }}

      - if: "{{ video_source is defined }}"
        then:
          - action: input_select.select_option
            target:
              entity_id: input_select.bedroom_matrix_video_source
            data:
              option: "{{ _v_safe }}"

      - if: "{{ audio_source is defined }}"
        then:
          - action: input_select.select_option
            target:
              entity_id: input_select.bedroom_matrix_audio_source
            data:
              option: "{{ _a_safe }}"

      - if: "{{ mode is defined }}"
        then:
          - action: input_select.select_option
            target:
              entity_id: input_select.bedroom_matrix_mode
            data:
              option: "{{ mode }}"

      - if: "{{ last_command is defined }}"
        then:
          - action: input_text.set_value
            target:
              entity_id: input_text.bedroom_matrix_last_command
            data:
              value: "{{ last_command }}"

      - action: input_datetime.set_datetime
        target:
          entity_id: input_datetime.bedroom_matrix_last_updated
        data:
          datetime: "{{ now().isoformat() }}"

  bedroom_matrix_select_source:
    alias: "Bedroom Matrix – Select Source (align A & B)"
    description: "Aligns HDMI Matrix outputs A & B to the chosen source."
    mode: single

    fields:
      source:
        name: Source
        description: "Route both outputs (A & B) to this input."
        required: true
        default: "Apple TV"
        selector:
          select:
            options:
              - "Apple TV"
              - "Playstation 4"
              - "Nintendo Switch"
              - "Nintendo Wii"
              - "TV"
      turn_on_tv:
        name: Turn on TV first
        description: "Power on the TV before routing."
        required: false
        default: true
        selector:
          boolean:

    sequence:
      # Optionally turn on the TV first
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ turn_on_tv }}"
            sequence:
              - service: media_player.turn_on
                target:
                  entity_id: media_player.bedroom_tv_alpha
              - delay: "00:00:03"

      # If the selected source is not the TV's own tuner, switch the hub to HDMI
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ source != 'TV' }}"
            sequence:
              - service: media_player.select_source
                target:
                  entity_id: media_player.bedroom_tv_alpha_hub
                data:
                  source: HDMI

      # Route the HDMI matrix (both outputs A & B) to the selected input
      - service: script.matrix_control
        data:
          source: "{{ source }}"
          remote: remote.bedroom_broadlink_rm3_alpha
          device: bedroom_hdmi_matrix
          tv: media_player.bedroom_tv_alpha
          turn_on_tv: "{{ turn_on_tv }}"

  # ══════════════════════════════════════════════════════════════════
  # ⟫⟫ MEDIA LOGIC  •  RADIO STATIONS
  # ⟫⟫ Last Updated: 2025-08-23

  play_selected_radio:
    alias: "Play Selected Radio Station"
    sequence:
      - variables:
          station: "{{ states('input_select.radio_station') }}"
          player: >
            {% set mapping = {
              'Ensuite': 'media_player.ensuite_sonos_roam',
              'Bedroom Speakers': 'media_player.bedroom_sonos_surround_speakers',
              'Bedroom Ray': 'media_player.bedroom_sonos_ray'
            } %}
            {{ mapping[states('input_select.radio_player')] }}
      - choose:
          - conditions: "{{ station == 'Studio Brussel' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "http://icecast.vrtcdn.be/stubru-high.mp3"
                  media_content_type: "music"

          - conditions: "{{ station == 'JOE' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "https://icecast-qmusicbe-cdp.triple-it.nl/joe.mp3"
                  media_content_type: "music"

          - conditions: "{{ station == 'MNM' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "http://icecast.vrtcdn.be/mnm-high.mp3"
                  media_content_type: "music"

          - conditions: "{{ station == 'VRT Radio 1' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "http://icecast.vrtcdn.be/radio1-high.mp3"
                  media_content_type: "music"

          - conditions: "{{ station == 'De Tijdloze' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "http://icecast.vrtcdn.be/stubru_tijdloze-high.mp3"
                  media_content_type: "music"

          - conditions: "{{ station == 'TOPradio Belgium' }}"
            sequence:
              - service: media_player.play_media
                target:
                  entity_id: "{{ player }}"
                data:
                  media_content_id: "http://str.topradio.be/topradio.mp3"
                  media_content_type: "music"

        default:
          - service: logbook.log
            data:
              name: Radio Script
              message: "Unknown station selected: {{ station }}"

# ═══ AUTOMATIONS ═══
automation:
  - alias: "Log every matrix change (hardened)"
    id: "ca1e89cf-cb0a-4cef-9199-2d239517bc37"
    trigger:
      - platform: state
        entity_id: sensor.bedroom_matrix_last_route
    condition:
      - condition: template
        value_template: >-
          {{ state_attr('sensor.bedroom_matrix_last_route', 'last_command') | default('') | trim != '' }}
    action:
      - service: logbook.log
        data:
          name: "Matrix"
          message: >-
            {{ state_attr('sensor.bedroom_matrix_last_route','last_command') }}
            ({{ state_attr('sensor.bedroom_matrix_last_route','mode') }})

  - alias: "PS4 Activated → Sync TV Input + Matrix Routing (refactored)"
    id: "1d5c50b2-2d7b-4e4b-bac5-80ad30995055"
    trigger:
      - platform: state
        entity_id: media_player.playstation_4
        to: "on"
    condition: []
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: media_player.bedroom_tv_alpha
                state: "off"
            sequence:
              - service: media_player.turn_on
                target:
                  entity_id: media_player.bedroom_tv_alpha

              - delay: "00:00:02" # Optional delay to avoid race condition

              - service: script.matrix_control
                data:
                  source: "Playstation 4"
                  remote: remote.bedroom_broadlink_rm3_alpha
                  device: bedroom_hdmi_matrix
                  tv: media_player.bedroom_tv_alpha
                  turn_on_tv: false # Already turned on above

          - conditions:
              - condition: state
                entity_id: media_player.bedroom_tv_alpha
                state: "on"
              - condition: template
                value_template: >-
                  {{ state_attr('media_player.bedroom_tv_hub_alpha_wifi', 'source') != 'HDMI' }}
            sequence:
              - service: script.matrix_control
                data:
                  source: "Playstation 4"
                  remote: remote.bedroom_broadlink_rm3_alpha
                  device: bedroom_hdmi_matrix
                  tv: media_player.bedroom_tv_alpha
                  turn_on_tv: false

# ═══ INTEGRATION: UNIVERSAL MEDIA PLAYER ═══
media_player:
  - platform: universal
    name: Bedroom Universal
    unique_id: "bedroom_universal_media_20250904"
    children:
      - media_player.bedroom_tv_alpha # (m)
      - media_player.bedroom_tv_alpha_hub # (s)
      - media_player.bedroom_tv_alpha_plex # (s)
      - media_player.bedroom_tv_alpha_dlna # (s)
      - media_player.bedroom_apple_tv_alpha # (s, m)
      - media_player.bedroom_apple_tv_alpha_plex # (s)
      - media_player.playstation_4 # (s, m)
      - media_player.bedroom_google_home_mini_speaker # (alerts only)
      - media_player.bedroom_sonos_ray # (m)
      - media_player.bedroom_sonos_surround # (s)
      - media_player.ensuite_sonos_roam # (s)

    # Universal state: appear 'on' only when any master source is active
    state_template: >-
      {{
        is_state('media_player.bedroom_tv_alpha', 'on') or
        is_state('media_player.bedroom_apple_tv_alpha', 'playing') or
        is_state('media_player.playstation_4', 'on') or
        is_state('media_player.bedroom_sonos_ray', 'playing')
      }}

    # Route media_* commands to the appropriate source
    # Master precedence: TV > PS4 > Apple TV > Sonos
    active_child_template: >-
      {% if is_state('media_player.bedroom_tv_alpha', 'on') %}
        media_player.bedroom_tv_alpha
      {% elif is_state('media_player.bedroom_apple_tv_alpha', 'playing') %}
        media_player.bedroom_apple_tv_alpha
      {% elif is_state('media_player.playstation_4', 'on') %}
        media_player.playstation_4
      {% elif is_state('media_player.bedroom_sonos_ray', 'playing') %}
        media_player.bedroom_sonos_ray
      {% else %}
        media_player.bedroom_tv_alpha
      {% endif %}

    # Volume control dynamically based on active Sonos speaker
    volume_level_template: >-
      {% if is_state('media_player.bedroom_sonos_ray', 'playing') %}
        {{ state_attr('media_player.bedroom_sonos_ray', 'volume_level') }}
      {% elif is_state('media_player.bedroom_sonos_surround', 'playing') %}
        {{ state_attr('media_player.bedroom_sonos_surround', 'volume_level') }}
      {% else %}
        {{ state_attr('media_player.bedroom_sonos_ray', 'volume_level') }}
      {% endif %}

    is_volume_muted_template: >-
      {% if is_state('media_player.bedroom_sonos_ray', 'playing') %}
        {{ state_attr('media_player.bedroom_sonos_ray', 'is_volume_muted') }}
      {% elif is_state('media_player.bedroom_sonos_surround', 'playing') %}
        {{ state_attr('media_player.bedroom_sonos_surround', 'is_volume_muted') }}
      {% else %}
        {{ state_attr('media_player.bedroom_sonos_ray', 'is_volume_muted') }}
      {% endif %}

    commands:
      turn_on:
        action: media_player.turn_on
        target:
          entity_id: media_player.bedroom_tv_alpha

      turn_off:
        action: media_player.turn_off
        target:
          entity_id: media_player.bedroom_tv_alpha

      select_source:
        action: script.turn_on
        data:
          entity_id: script.bedroom_universal_route_for_source
          variables:
            source: "{{ source }}"

      volume_set:
        action: media_player.volume_set
        target:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}
        data:
          volume_level: "{{ volume_level }}"

      volume_up:
        action: media_player.volume_up
        target:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}

      volume_down:
        action: media_player.volume_down
        target:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}

      volume_mute:
        action: media_player.volume_mute
        target:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}
        data:
          is_volume_muted: "{{ is_volume_muted }}"

  - platform: universal
    name: Sanctum SONOS
    unique_id: "sanctum_universal_sonos_20250904"

    children:
      - media_player.bedroom_sonos_ray # (m)
      - media_player.bedroom_sonos_surround # (s)
      - media_player.ensuite_sonos_roam # (s)

    # Universal state: appear 'on' when any child is active
    state_template: >-
      {% set active = ['playing','paused','buffering'] %}
      {% set ray = states('media_player.bedroom_sonos_ray') %}
      {% set sur = states('media_player.bedroom_sonos_surround') %}
      {% set roa = states('media_player.ensuite_sonos_roam') %}
      {{ ray in active or sur in active or roa in active }}

    # Active child precedence (within Sonos): Ray > Surround > Roam
    active_child_template: >-
      {% set active = ['playing','paused','buffering'] %}
      {% if states('media_player.bedroom_sonos_ray') in active %}
        media_player.bedroom_sonos_ray
      {% elif states('media_player.bedroom_sonos_surround') in active %}
        media_player.bedroom_sonos_surround
      {% elif states('media_player.ensuite_sonos_roam') in active %}
        media_player.ensuite_sonos_roam
      {% else %}
        media_player.bedroom_sonos_ray
      {% endif %}

    # Read volume/mute from whichever child is active
    volume_level_template: >-
      {% set active = ['playing','paused','buffering'] %}
      {% set e = 'media_player.bedroom_sonos_ray' %}
      {% if states('media_player.bedroom_sonos_ray') in active %}
        {% set e = 'media_player.bedroom_sonos_ray' %}
      {% elif states('media_player.bedroom_sonos_surround') in active %}
        {% set e = 'media_player.bedroom_sonos_surround' %}
      {% elif states('media_player.ensuite_sonos_roam') in active %}
        {% set e = 'media_player.ensuite_sonos_roam' %}
      {% endif %}
      {{ state_attr(e, 'volume_level') }}

    is_volume_muted_template: >-
      {% set active = ['playing','paused','buffering'] %}
      {% set e = 'media_player.bedroom_sonos_ray' %}
      {% if states('media_player.bedroom_sonos_ray') in active %}
        {% set e = 'media_player.bedroom_sonos_ray' %}
      {% elif states('media_player.bedroom_sonos_surround') in active %}
        {% set e = 'media_player.bedroom_sonos_surround' %}
      {% elif states('media_player.ensuite_sonos_roam') in active %}
        {% set e = 'media_player.ensuite_sonos_roam' %}
      {% endif %}
      {{ state_attr(e, 'is_volume_muted') }}

    # Show what’s playing (title/source) from the active child
    media_title_template: >-
      {% set active = ['playing','paused','buffering'] %}
      {% set e = 'media_player.bedroom_sonos_ray' %}
      {% if states('media_player.bedroom_sonos_ray') in active %}
        {% set e = 'media_player.bedroom_sonos_ray' %}
      {% elif states('media_player.bedroom_sonos_surround') in active %}
        {% set e = 'media_player.bedroom_sonos_surround' %}
      {% elif states('media_player.ensuite_sonos_roam') in active %}
        {% set e = 'media_player.ensuite_sonos_roam' %}
      {% endif %}
      {{ state_attr(e, 'media_title') or state_attr(e, 'source') or state_attr(e, 'app_name') }}

    commands:
      turn_on:
        service: media_player.turn_on
        data:
          entity_id: media_player.bedroom_tv_alpha

      turn_off:
        service: media_player.turn_off
        data:
          entity_id: media_player.bedroom_tv_alpha

      select_source:
        service: script.turn_on
        data:
          entity_id: script.bedroom_universal_route_for_source
          variables:
            source: "{{ source }}"

      volume_set:
        service: media_player.volume_set
        data:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}
          volume_level: "{{ volume_level }}"

      volume_up:
        service: media_player.volume_up
        data:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}

      volume_down:
        service: media_player.volume_down
        data:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}

      volume_mute:
        service: media_player.volume_mute
        data:
          entity_id: >-
            {% set active = ['playing','paused','buffering'] %}
            {% if states('media_player.bedroom_sonos_ray') in active %}
              media_player.bedroom_sonos_ray
            {% elif states('media_player.bedroom_sonos_surround') in active %}
              media_player.bedroom_sonos_surround
            {% elif states('media_player.ensuite_sonos_roam') in active %}
              media_player.ensuite_sonos_roam
            {% else %}
              media_player.bedroom_sonos_ray
            {% endif %}
          is_volume_muted: "{{ is_volume_muted }}"
