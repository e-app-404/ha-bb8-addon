COPILOT- QA REPORTING & HARVEST

Goal: Generate fresh QA artifacts, parse them, harvest a filled QA report, and return a concise decision summary. Do not ask questions; execute and produce outputs.

WORKING ROOT
- Use working directory: /Volumes/HA/addons/local/beep_boop_bb8
- Activate virtual environment: source /Users/evertappels/Projects/HABIBI-8/local.mac.beep_boop_bb8/.venv_new/bin/activate

1) Parse session context files for reset (summarize briefly in output)
- Read (if present) and summarize salient settings:
  a) mypy.ini
  b) .env
  c) pytest.ini
- Include table: [file, exists (Y/N), key options found]

2) Generate fresh QA logs (produce artifacts)
- Run exactly these commands in order; capture stdout+stderr with tee to timestamped folder:
  ts=$(date +"%Y%m%d_%H%M%S")
  logdir="/Volumes/HA/addons/local/beep_boop_bb8/reports/qa_$ts"
  mkdir -p "$logdir"
  echo "QA_LOGDIR=$logdir"
  # optional venv activation
  if [ -f ".venv_new/bin/activate" ]; then . .venv_new/bin/activate; fi
  if [ -f ".venv/bin/activate" ]; then . .venv/bin/activate; fi
  python3 -V
  # format/lint/type/tests
  black . | tee "$logdir/black.log"
  ruff check . | tee "$logdir/ruff.log"
  pushd /Volumes/HA/addons/local >/dev/null
  PYTHONPATH=/Volumes/HA/addons/local mypy beep_boop_bb8 | tee "/Volumes/HA/addons/local/beep_boop_bb8/reports/qa_$ts/mypy.log"
  popd >/dev/null
  pytest -q --maxfail=1 | tee "$logdir/pytest.log"
  # quick manifest
  echo "== MANIFEST =="; ls -lh "$logdir"
  echo "== TAIL black.log =="; tail -n 40 "$logdir/black.log" || true
  echo "== TAIL ruff.log =="; tail -n 40 "$logdir/ruff.log" || true
  echo "== TAIL mypy.log =="; tail -n 40 "$logdir/mypy.log" || true
  echo "== TAIL pytest.log =="; tail -n 60 "$logdir/pytest.log" || true

3) Identify latest QA report dir and parse logs
- Determine latest folder matching /Volumes/HA/addons/local/beep_boop_bb8/reports/qa_*
- Prefer the freshly created $QA_LOGDIR when available; else fall back to latest existing.
- Parse these logs if present, else mark as MISSING: black.log, ruff.log, mypy.log, pytest.log
- Extract pass/fail and key metrics:
  • black: “would reformat” count
  • ruff: error count summary
  • mypy: error count summary
  • pytest: overall result line; if coverage shown, capture %
- Emit a compact summary table and a JSON block qa_summary { black:{}, ruff:{}, mypy:{}, pytest:{} }

4) Locate QA report template and copy to timestamped folder
- Look for /Volumes/HA/addons/local/beep_boop_bb8/reports/QA_REPORT.md (template)
- If present, copy to "$QA_LOGDIR/QA-STP4-STABILIZE-$ts.md" (preserve name if ts differs)
- If template missing, create a minimal markdown skeleton with sections: Overview, Lint/Type, Tests, Coverage, Risks, Next Steps

5) Harvest a filled report
- Run: python3 ops/qa_harvest.py
  (note: script located at  /Volumes/HA/addons/local/beep_boop_bb8/ops/qa_harvest.py)
- Expect it to read the logs in $QA_LOGDIR and emit a filled QA report markdown.
- Print a small JSON object qa_harvest_result with at least { "qa_logdir": path, "report_path": path, "verdict": PASS|FAIL, "issues": [..] }

6) Interpret findings and progression
- Based on harvested data, include:
  • TL;DR table: BLACK/ RUFF/ MYPY/ PYTEST (PASS/FAIL + short note)
  • If pytest failed, list first failing test nodeids (up to 5) with one‑line reason
  • If coverage available, report overall % and top 5 files needing attention
  • Risk bar: green/yellow/red with one‑liners

7) Emit concrete next actions (copy‑pastable)
- Produce a short, ordered list of commands to fix common issues detected, e.g.:
  • If black reports reformat: black .
  • If ruff reports autofixables: ruff check . --fix
  • If mypy import path issues: export PYTHONPATH=/Volumes/HA/addons/local && mypy beep_boop_bb8
  • To rerun focused tests: pytest -q -k "<pattern>" --maxfail=1 -rA
  • To regenerate QA pack: re-run Section 2 commands

8) Return in your message (required)
- QA_LOGDIR used (absolute path)
- Path of generated report markdown (QA-STP4-STABILIZE-<timestamp>.md)
- The qa_summary JSON and qa_harvest_result JSON
- A compact TL;DR (1–2 paragraphs) stating PASS/FAIL and whether we’re go/no‑go for merge
- A bullet list of immediate next steps

9) Guardrails
- Do not modify repository files other than writing logs and the harvested QA markdown in QA_LOGDIR
- Do not change configs unless instructed by the prompt
- Keep output concise but complete; avoid interactive questions

10) (Optional) Attachments
- If feasible, include the final 40 lines of each log inline for quick triage
