# Δ Patch bundle (repo-relative, small & scoped)

**Creates** `tools/evidence_preflight.sh`, `tools/mqtt_probe.py`, `tools/capture_trace.py`.
**Updates** `addon/Makefile` target `evidence-stp4` to use the wrapper.
No production code changed.

```diff
*** Begin Patch
*** Update File: addon/Makefile
@@
-evidence-stp4:
-    python addon/ops/evidence/collect_stp4.py
+evidence-stp4:
+	# Strategos: diagnostic wrapper to ensure artifacts even on failure
+	# Requires: MQTT_HOST, MQTT_PORT, MQTT_USERNAME, MQTT_PASSWORD, MQTT_BASE (bb8)
+	# Env defaults: REQUIRE_DEVICE_ECHO=1, ENABLE_BRIDGE_TELEMETRY=1
+	./tools/evidence_preflight.sh
*** End Patch
```

```diff
*** Begin Patch
*** Add File: tools/evidence_preflight.sh
+#!/usr/bin/env bash
+set -euo pipefail
+mkdir -p reports/evidence
+
+: "${MQTT_BASE:=bb8}"
+: "${REQUIRE_DEVICE_ECHO:=1}"
+: "${ENABLE_BRIDGE_TELEMETRY:=1}"
+
+TS="$(date -u +%Y%m%d_%H%M%SZ)"
+RUNLOG="reports/evidence/run_${TS}.log"
+TRACE_JSONL="reports/evidence/ha_mqtt_trace_snapshot_${TS}.jsonl"
+MANIFEST="reports/evidence/evidence_manifest.json"
+
+echo "[evidence] ts=$TS base=$MQTT_BASE require_echo=$REQUIRE_DEVICE_ECHO" | tee -a "$RUNLOG"
+echo "[evidence] broker=$MQTT_HOST:$MQTT_PORT user=${MQTT_USERNAME:-}" | tee -a "$RUNLOG"
+
+echo "[evidence] step=probe" | tee -a "$RUNLOG"
+python tools/mqtt_probe.py --timeout 8 --require-echo "$REQUIRE_DEVICE_ECHO" 2>&1 | tee -a "$RUNLOG" || true
+
+echo "[evidence] step=capture" | tee -a "$RUNLOG"
+python tools/capture_trace.py --duration 12 --out "$TRACE_JSONL" 2>&1 | tee -a "$RUNLOG" || true
+
+ROUNDTRIP="FAIL"
+if grep -q "probe: roundtrip=PASS" "$RUNLOG"; then
+  ROUNDTRIP="PASS"
+fi
+
+SCHEMA="UNKNOWN"
+if grep -q "schema=PASS" "$RUNLOG"; then
+  SCHEMA="PASS"
+elif grep -q "schema=FAIL" "$RUNLOG"; then
+  SCHEMA="FAIL"
+fi
+
+echo "[evidence] step=collector" | tee -a "$RUNLOG"
+if python addon/ops/evidence/collect_stp4.py 2>&1 | tee -a "$RUNLOG"; then
+  :
+else
+  echo "[evidence] collector exited nonzero (continuing; manifest will record FAIL)" | tee -a "$RUNLOG"
+fi
+
+echo "[evidence] step=manifest" | tee -a "$RUNLOG"
+python - <<'PY' > "$MANIFEST"
+import json, os, glob, time
+ts=time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())
+def first(globpat):
+    m=sorted(glob.glob(globpat))
+    return m[-1] if m else None
+manifest={
+  "timestamp_utc": ts,
+  "roundtrip": "TBD",
+  "schema": "TBD",
+  "files": {
+    "trace": first("reports/evidence/ha_mqtt_trace_snapshot_*.jsonl") or first("reports/evidence/ha_mqtt_trace_snapshot.jsonl"),
+    "manifest_self": "reports/evidence/evidence_manifest.json",
+    "run_log": first("reports/evidence/run_*.log") or "reports/evidence/run.log"
+  }
+}
+print(json.dumps(manifest, indent=2))
+PY
+
+# Stamp final verdicts into manifest
+python - "$ROUNDTRIP" "$SCHEMA" "$MANIFEST" <<'PY'
+import json,sys
+rt,sc,mp=sys.argv[1],sys.argv[2],sys.argv[3]
+with open(mp) as f: m=json.load(f)
+m["roundtrip"]=rt
+m["schema"]=sc
+with open(mp,"w") as f: json.dump(m,f,indent=2)
+print(f"[evidence] manifest written: {mp}")
+PY
+
+echo "[evidence] complete: roundtrip=$ROUNDTRIP schema=$SCHEMA" | tee -a "$RUNLOG"
*** End Patch
```

```diff
*** Begin Patch
*** Add File: tools/mqtt_probe.py
+#!/usr/bin/env python
+import os, json, time, argparse, threading
+from typing import Optional
+import paho.mqtt.client as mqtt
+
+def env(name, default=None, required=False):
+    v=os.environ.get(name, default)
+    if required and (v is None or v==""):
+        raise SystemExit(f"[probe] missing env {name}")
+    return v
+
+def main():
+    ap=argparse.ArgumentParser()
+    ap.add_argument("--timeout", type=int, default=8)
+    ap.add_argument("--require-echo", default="1")
+    args=ap.parse_args()
+
+    host=env("MQTT_HOST", required=True)
+    port=int(env("MQTT_PORT", "1883"))
+    user=env("MQTT_USERNAME")
+    pwd=env("MQTT_PASSWORD")
+    base=env("MQTT_BASE","bb8")
+
+    client=mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=f"probe-{int(time.time())}")
+    if user: client.username_pw_set(user, pwd or None)
+    res={"connected":False,"roundtrip":"FAIL","schema":"UNKNOWN"}
+    got_echo=threading.Event()
+    payload_seen: Optional[dict]=None
+
+    def on_message(c,ud,msg):
+        nonlocal payload_seen
+        try:
+            payload=json.loads(msg.payload.decode("utf-8"))
+        except Exception:
+            return
+        if msg.topic == f"{base}/echo/state":
+            payload_seen=payload
+            got_echo.set()
+
+    def on_connect(c,ud,flags,rc,props=None):
+        if rc==0:
+            res["connected"]=True
+            c.subscribe([(f"{base}/#",0)])
+            # issue a probe command
+            cmd={"value": 1, "ts": int(time.time())}
+            c.publish(f"{base}/echo/cmd", json.dumps(cmd), qos=0, retain=False)
+
+    client.on_connect=on_connect
+    client.on_message=on_message
+    client.connect(host, port, keepalive=10)
+    client.loop_start()
+    got_echo.wait(timeout=args.timeout)
+    client.loop_stop()
+    client.disconnect()
+
+    if got_echo.is_set() and payload_seen:
+        # require schema: source=device
+        if payload_seen.get("source")=="device":
+            res["roundtrip"]="PASS"
+        else:
+            res["roundtrip"]="FAIL"
+        res["schema"]="PASS" if "source" in payload_seen else "FAIL"
+
+    print(f"probe: connected={res['connected']} roundtrip={res['roundtrip']} schema={res['schema']}")
+    if not res["connected"]:
+        raise SystemExit(2)
+    if res["roundtrip"]!="PASS" and os.environ.get("REQUIRE_DEVICE_ECHO","1")=="1":
+        raise SystemExit(3)
+
+if __name__=="__main__":
+    main()
*** End Patch
```

```diff
*** Begin Patch
*** Add File: tools/capture_trace.py
+#!/usr/bin/env python
+import os,json,time,argparse,sys
+import paho.mqtt.client as mqtt
+
+def env(name, default=None, required=False):
+    v=os.environ.get(name, default)
+    if required and (v is None or v==""):
+        raise SystemExit(f"[trace] missing env {name}")
+    return v
+
+def main():
+    ap=argparse.ArgumentParser()
+    ap.add_argument("--duration", type=int, default=12)
+    ap.add_argument("--out", required=True)
+    args=ap.parse_args()
+    host=env("MQTT_HOST", required=True)
+    port=int(env("MQTT_PORT","1883"))
+    user=env("MQTT_USERNAME")
+    pwd=env("MQTT_PASSWORD")
+    base=env("MQTT_BASE","bb8")
+
+    out=args.out
+    fh=open(out,"w",encoding="utf-8")
+    start=time.time()
+    client=mqtt.Client(mqtt.CallbackAPIVersion.VERSION2, client_id=f"trace-{int(start)}")
+    if user: client.username_pw_set(user, pwd or None)
+
+    def on_message(c,ud,msg):
+        try:
+            payload=msg.payload.decode("utf-8","ignore")
+        except Exception:
+            payload="<bin>"
+        rec={"ts": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
+             "topic": msg.topic, "payload": payload, "qos": msg.qos, "retain": bool(msg.retain)}
+        fh.write(json.dumps(rec)+"\n"); fh.flush()
+
+    def on_connect(c,ud,flags,rc,props=None):
+        if rc==0:
+            c.subscribe([(f"{base}/#",0),(f"homeassistant/#",0)])
+
+    client.on_message=on_message
+    client.on_connect=on_connect
+    client.connect(host,port,keepalive=10)
+    client.loop_start()
+    while time.time()-start < args.duration:
+        time.sleep(0.2)
+    client.loop_stop(); client.disconnect(); fh.close()
+    print(f"[trace] wrote {out}")
+
+if __name__=="__main__":
+    main()
*** End Patch
```

---

# Copilot — apply, run, return

```bash
# apply patch bundle
git checkout -b chore/evidence-preflight || git checkout chore/evidence-preflight
git apply -p0 <<'PATCH'
[PASTE THE THREE DIFF BLOCKS ABOVE IN ORDER]
PATCH

chmod +x tools/evidence_preflight.sh
git add -A
git commit -m "chore(evidence): add MQTT probe + trace and wrap evidence-stp4 to always emit artifacts"

# set strict env (fill broker secrets)
export MQTT_BASE=bb8
export REQUIRE_DEVICE_ECHO=1
export ENABLE_BRIDGE_TELEMETRY=1
: "${MQTT_HOST:?set}"; : "${MQTT_PORT:?set}"; : "${MQTT_USERNAME:?set}"; : "${MQTT_PASSWORD:?set}"

# dry-run, then run
make -n evidence-stp4
make evidence-stp4 || true

# return artifacts (even on FAIL, wrapper writes them)
echo "=== evidence_manifest.json ==="
sed -n '1,300p' reports/evidence/evidence_manifest.json || true
echo "=== ha_mqtt_trace_snapshot (first 200 lines) ==="
sed -n '1,200p' reports/evidence/ha_mqtt_trace_snapshot_*.jsonl 2>/dev/null || true
echo "=== run.log (first 150 lines) ==="
sed -n '1,150p' reports/evidence/run_*.log || true
```

---

## If probe shows `connected=false` or times out

* Verify `MQTT_HOST/PORT/USERNAME/PASSWORD`.
* Ensure broker reachable from runner host (firewall/VPN).
* Device must be online to satisfy `REQUIRE_DEVICE_ECHO=1`; temporarily set `REQUIRE_DEVICE_ECHO=0` to capture traces if the device is offline, then re-run with `1` to satisfy gate.

---