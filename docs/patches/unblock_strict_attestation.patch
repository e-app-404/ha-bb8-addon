COPILOT- Please activate virtual environment and apply patches stepwise: 

## A. Wrapper Hotfix (workspace-root, subtree, runtime reset)

**Do not** `git init` in `addon/`. Patch your wrappers to run git from the **workspace root** and publish via **subtree**, then deploy/reset runtime:

```bash
# Subtree publish: skip if addon/ unchanged
if git diff --quiet HEAD -- addon; then
  echo "SUBTREE_NOOP (addon unchanged)"
else
  git subtree split -P addon -b __addon_pub_tmp
  git push -f https://github.com/e-app-404/ha-bb8-addon.git __addon_pub_tmp:main
  git branch -D __addon_pub_tmp || true
  echo "SUBTREE_PUBLISH_OK"
fi

# verify_workspace.sh — workspace-root checks (excerpt)
WS_ROOT="$(git rev-parse --show-toplevel)"
set -e
git -C "$WS_ROOT" status -- addon > /dev/null        # addon tracked by workspace
# structure checks per ADR-0001 (no nested repo, required files present)
echo "STRUCTURE_OK"  # emit token on success

# deploy_to_ha.sh — subtree publish + HA runtime reset (excerpt)
WS_ROOT="$(git rev-parse --show-toplevel)"
REMOTE_ADDON="${REMOTE_ADDON:-https://github.com/e-app-404/ha-bb8-addon.git}"

# SSH deploy (Services API/LLAT per ADR addendum)
# ... your existing restart script here ...
echo "DEPLOY_OK"
echo "VERIFY_OK"
```

Rationale: exactly aligns to ADR-0001 (workspace-root repo, subtree publish, runtime hard-reset & restart).&#x20;
If the `addon/` tree is stale, restore it first per **RESTORE_ADDON.md**.&#x20;

---

## B. Test Harness Stabilization

1. **Install dev deps & editable package** (one time):
   `pip install -e addon && pip install -r addon/requirements-dev.txt`&#x20;

2. **pytest.ini (at workspace root or under addon/)**

```ini
[pytest]
testpaths = addon/tests
python_files = test_*.py
addopts = -q -W error --maxfail=1
asyncio_mode = auto
filterwarnings =
    ignore:.*callback API version 1 deprecated.*:DeprecationWarning:paho # keep ADR-0002 without failing tests
```

(We suppress only the paho v1 deprecation; other warnings still fail the run.)&#x20;

3. **Remove duplicate event loop fixtures**
   If you have a custom `event_loop` fixture, delete/rename it and rely on pytest-asyncio’s built-ins. This eliminates `PluggyTeardownRaisedWarning`.&#x20;

---

## C. Code Patch (safe cancellation in `ble_link`, awaitable stop)

```diff
*** Begin Patch
*** Update File: addon/bb8_core/ble_link.py
@@
 _runner_future = None
 _started = False
@@
 def start() -> None:
@@
  _runner_future = asyncio.run_coroutine_threadsafe(_run(), _loop)
  _started = True
  log.info("ble_link_runner_started")
+
+def stop(timeout: float = 3.0) -> None:
+    """Cancel the BLE worker and drain the loop to avoid un-awaited coroutine warnings."""
+    global _runner_future, _started, _loop
+    fut = _runner_future
+    _runner_future = None
+    _started = False
+    if not fut or _loop is None or _loop.is_closed():
+        return
+    try:
+        fut.cancel()
+        # Drain cancellation on the BLE loop thread
+        asyncio.run_coroutine_threadsafe(asyncio.sleep(0), _loop).result(timeout=timeout)
+    except Exception as e:
+        log.warning("ble_link_stop_exception %s", e)
*** End Patch
```

Use `ble_link.stop()` in teardown paths or tests to avoid `PytestUnraisableExceptionWarning`.

---

## D. Keep ADR-0002 compliant MQTT usage (avoid deprecation noise)

Where you construct the client:


## D. Pytest harness (only if you hit async warnings)

Keep tests strict but suppress only the paho v1 deprecation:

# addon/pytest.ini or workspace pytest.ini
[pytest]
You’re at `29d5f71c6e29…` (no tag). Once tokens are green on this head, I recommend tagging it (e.g., **`v2025.8.21.2`**) as your governed baseline for the STRICT run and stamping that in the receipts.

---

## Binary Acceptance Gate (unchanged)

* coverage ≥ **80%**
* STRICT device-originated echoes (**retain=false**)
* **No asyncio event-loop warnings** (others suppressed only for paho deprecation)
* tokens present: **STRUCTURE\_OK, DEPLOY\_OK, VERIFY\_OK, WS\_READY**
* `qa_report_contract_v1.verdict == PASS`

---

# Delta Contract — Unblock STRICT Attestation (topology + tests)
file: docs/delta_contracts/unblock_strict_attestation.yaml


```yaml
planned_change: "Fix wrappers for ADR-0001 topology; stabilize async tests; keep paho v1 per ADR-0002 without warning leaks"
deliverable:
  - wrapper hotfix (workspace-root, subtree publish)
  - async test harness (pytest-asyncio auto; remove duplicate loop fixtures)
  - ble_link safe stop/cancel drain
  - warning policy: suppress paho DeprecationWarning only
action_needed:
  - "Restore/confirm addon/ working tree without .git (if needed) per RESTORE_ADDON.md"
  - "Patch wrappers to operate from workspace root and use git subtree for publish; runtime deploy via SSH/Services API"
  - "Install dev deps; enable pytest-asyncio; remove custom event loop fixture; add ble_link.stop()"
  - "Re-run Protocols 2→9 (VERIFY → DEPLOY → TESTS → STRICT echo → DISCOVERY → QA → MANIFEST)"
acceptance_criteria:
  - "WS_READY, STRUCTURE_OK, DEPLOY_OK, VERIFY_OK tokens emitted"
  - "coverage >= 80%; no asyncio loop warnings; STRICT echo retain=false; LED discovery unique_id stable; qa_report PASS"
risk_assessment:
  - "If wrappers remain addon-scoped, governance/tokens will continue to fail"
  - "If pytest-asyncio absent, async tests keep failing"
trace_refs:
  - "ADR-0001 workspace topology"  # addon/ not a repo; subtree publish
  - "ADR-0002 dependency policy"   # paho >=2,<3 with VERSION1 callbacks
```
