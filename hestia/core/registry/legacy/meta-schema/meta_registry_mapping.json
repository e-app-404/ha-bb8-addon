{
    "$schema": "http://json-schema.org/hestia-v7/schema#",
    "title": "registry_mapping.json Meta-Schema",
    "name": "Hestia Registry Relationship Map",
    "description": "Schema for mapping relationships between different registry files in the HESTIA system",
    "type": "object",
    "required": ["_meta", "registry_definitions", "relationships", "dependency_graph", "validation_rules"],
    "properties": {
      "_meta": {
        "type": "object",
        "required": ["version", "generated_at", "generator"],
        "properties": {
          "version": { 
            "type": "string",
            "description": "Version of the registry mapping schema",
            "example": "1.1.0"
          },
          "generated_at": { 
            "type": "string", 
            "format": "date-time",
            "description": "Timestamp when this mapping was generated",
            "example": "2025-04-29T09:30:15Z"
          },
          "generator": { 
            "type": "string",
            "description": "Component that generated this mapping",
            "example": "HESTIA-CoreInitializer"
          },
          "schema_version": { 
            "type": "string",
            "description": "Version of the schema definition",
            "example": "2.0.0"
          }
        }
      },
      "registry_definitions": {
        "type": "object",
        "description": "Metadata about each registry file in the system",
        "patternProperties": {
          "^[a-z0-9_]+\\.json$": {
            "type": "object",
            "required": ["path", "schema", "primary_key", "load_order"],
            "properties": {
              "path": {
                "type": "string",
                "description": "File path relative to registry root",
                "example": "/config/hestia/core/registry/alpha_device_registry.json"
              },
              "schema": {
                "type": "string",
                "description": "Path to schema definition file",
                "example": "/config/hestia/core/schemas/alpha_device_registry_schema.json"
              },
              "primary_key": {
                "type": "string",
                "description": "JSON path to the primary key field",
                "example": "devices.*.metadata.alpha_canonical"
              },
              "description": {
                "type": "string",
                "description": "Human-readable description",
                "example": "Primary device registry containing all physical devices"
              },
              "category": {
                "type": "string",
                "enum": ["primary", "derived", "configuration", "metadata", "historical"],
                "description": "Registry category",
                "example": "primary"
              },
              "load_order": {
                "type": "integer",
                "description": "Order in which registries should be loaded (lower first)",
                "minimum": 0,
                "example": 10
              },
              "refresh_frequency": {
                "type": "string",
                "description": "How often this registry is refreshed",
                "example": "on_demand"
              },
              "last_modified": {
                "type": "string",
                "format": "date-time",
                "description": "When registry was last modified",
                "example": "2025-04-28T14:22:35Z"
              },
              "owner": {
                "type": "string",
                "description": "Component or role responsible for this registry",
                "example": "Signal Plane Architect"
              },
              "size_bytes": {
                "type": "integer",
                "description": "Current file size in bytes",
                "example": 1024576
              },
              "entry_count": {
                "type": "integer",
                "description": "Number of entries in the registry",
                "example": 245
              },
              "required_by": {
                "type": "array",
                "description": "System components that require this registry",
                "items": {
                  "type": "string",
                  "example": "hermes.presence_detection"
                }
              },
              "cache_policy": {
                "type": "string",
                "enum": ["memory", "disk", "none"],
                "description": "How this registry is cached",
                "example": "memory"
              }
            }
          }
        }
      },
      "relationships": {
        "type": "array",
        "description": "Defined relationships between registry files",
        "items": {
          "type": "object",
          "required": ["source", "target", "relationship_type", "fields"],
          "properties": {
            "source": {
              "type": "string",
              "description": "Source registry filename",
              "example": "alpha_device_registry.json"
            },
            "target": {
              "type": "string",
              "description": "Target registry filename",
              "example": "beta_entity_registry.json"
            },
            "relationship_type": {
              "type": "string",
              "enum": ["generates", "references", "depends_on", "extends", "validates", "configures", "historizes"],
              "description": "Type of relationship",
              "example": "generates"
            },
            "cardinality": {
              "type": "string",
              "enum": ["1:1", "1:N", "N:1", "N:M"],
              "description": "Relationship cardinality",
              "example": "1:N"
            },
            "fields": {
              "type": "array",
              "description": "Field mappings between registries",
              "items": {
                "type": "object",
                "required": ["source_field", "target_field"],
                "properties": {
                  "source_field": {
                    "type": "string",
                    "description": "JSON path to source field",
                    "example": "devices.*.metadata.alpha_canonical"
                  },
                  "target_field": {
                    "type": "string",
                    "description": "JSON path to target field",
                    "example": "entities.*.source_alpha_id"
                  },
                  "transformation": {
                    "type": "string",
                    "description": "Transformation applied to value",
                    "example": "replace('_α', '_β')"
                  },
                  "required": {
                    "type": "boolean",
                    "description": "Whether this mapping is required",
                    "example": true
                  },
                  "validation": {
                    "type": "string",
                    "description": "Validation rule for this mapping",
                    "example": "regex('^[a-z0-9_]+_β$')"
                  }
                }
              }
            },
            "integrity_constraints": {
              "type": "array",
              "description": "Integrity rules for this relationship",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Constraint name",
                    "example": "alpha_to_beta_complete"
                  },
                  "rule": {
                    "type": "string",
                    "description": "Rule definition",
                    "example": "All alpha entities must have corresponding beta entities"
                  },
                  "query": {
                    "type": "string",
                    "description": "Query to check constraint",
                    "example": "COUNT(source.devices) = COUNT(target.entities)"
                  },
                  "severity": {
                    "type": "string",
                    "enum": ["error", "warning", "info"],
                    "description": "Severity of violation",
                    "example": "error"
                  },
                  "auto_fixable": {
                    "type": "boolean",
                    "description": "Whether violations can be auto-fixed",
                    "example": true
                  }
                }
              }
            },
            "trigger_events": {
              "type": "array",
              "description": "Events that trigger updates via this relationship",
              "items": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "Event name",
                    "example": "device_added"
                  },
                  "propagation_delay": {
                    "type": "string",
                    "description": "How quickly changes propagate",
                    "example": "immediate"
                  },
                  "handler": {
                    "type": "string",
                    "description": "Component that handles this event",
                    "example": "BetaEntityGenerator"
                  }
                }
              }
            }
          }
        }
      },
      "dependency_graph": {
        "type": "object",
        "description": "Directed graph of registry dependencies",
        "properties": {
          "nodes": {
            "type": "array",
            "description": "Registry nodes in the graph",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Registry identifier",
                  "example": "alpha_device_registry.json"
                },
                "category": {
                  "type": "string",
                  "description": "Node category",
                  "example": "primary_source"
                },
                "load_level": {
                  "type": "integer",
                  "description": "Load priority level",
                  "example": 1
                }
              }
            }
          },
          "edges": {
            "type": "array",
            "description": "Dependencies between registries",
            "items": {
              "type": "object",
              "properties": {
                "source": {
                  "type": "string",
                  "description": "Source node ID",
                  "example": "alpha_device_registry.json"
                },
                "target": {
                  "type": "string",
                  "description": "Target node ID",
                  "example": "beta_entity_registry.json"
                },
                "relationship": {
                  "type": "string",
                  "description": "Relationship type",
                  "example": "generates"
                },
                "critical_path": {
                  "type": "boolean",
                  "description": "Whether this is on the critical path",
                  "example": true
                }
              }
            }
          },
          "subgraphs": {
            "type": "array",
            "description": "Organized subgraphs by subsystem",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Subgraph name",
                  "example": "hermes"
                },
                "nodes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "room_registry.json"
                  }
                }
              }
            }
          }
        }
      },
      "validation_rules": {
        "type": "array",
        "description": "Cross-registry validation rules",
        "items": {
          "type": "object",
          "required": ["rule_id", "description", "registries", "check"],
          "properties": {
            "rule_id": {
              "type": "string",
              "description": "Unique rule identifier",
              "example": "cross_alpha_beta_integrity"
            },
            "description": {
              "type": "string",
              "description": "Human-readable description",
              "example": "All alpha entities must have beta counterparts"
            },
            "registries": {
              "type": "array",
              "description": "Registries involved in this rule",
              "items": {
                "type": "string",
                "example": "alpha_device_registry.json"
              }
            },
            "check": {
              "type": "string",
              "description": "Rule implementation details",
              "example": "SELECT alpha FROM alpha_device_registry WHERE NOT EXISTS (SELECT 1 FROM beta_entity_registry WHERE beta.source = alpha.id)"
            },
            "severity": {
              "type": "string",
              "enum": ["error", "warning", "info"],
              "description": "Severity of violations",
              "example": "error"
            },
            "fix_strategy": {
              "type": "string",
              "description": "How to fix violations",
              "example": "auto_generate_beta"
            },
            "owner": {
              "type": "string",
              "description": "Component responsible for this rule",
              "example": "EntityValidator"
            }
          }
        }
      },
      "load_order": {
        "type": "array",
        "description": "Optimal load sequence for registries",
        "items": {
          "type": "object",
          "properties": {
            "phase": {
              "type": "string",
              "description": "Load phase name",
              "example": "core_configuration"
            },
            "registries": {
              "type": "array",
              "description": "Registries to load in this phase",
              "items": {
                "type": "string",
                "example": "alpha_device_registry.json"
              }
            },
            "dependencies_satisfied": {
              "type": "boolean",
              "description": "Whether dependencies are met",
              "example": true
            }
          }
        }
      },
      "synchronization_info": {
        "type": "object",
        "description": "Registry synchronization metadata",
        "properties": {
          "last_full_sync": {
            "type": "string",
            "format": "date-time",
            "description": "Last time all registries were synchronized",
            "example": "2025-04-28T00:00:00Z"
          },
          "partial_syncs": {
            "type": "array",
            "description": "Recent partial synchronizations",
            "items": {
              "type": "object",
              "properties": {
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "When this sync occurred",
                  "example": "2025-04-29T12:15:00Z"
                },
                "registries": {
                  "type": "array",
                  "description": "Registries synchronized",
                  "items": {
                    "type": "string",
                    "example": "beta_entity_registry.json"
                  }
                },
                "trigger": {
                  "type": "string",
                  "description": "What triggered the sync",
                  "example": "alpha_device_added"
                }
              }
            }
          },
          "sync_schedule": {
            "type": "object",
            "description": "Scheduled synchronization plan",
            "patternProperties": {
              "^[a-z0-9_]+\\.json$": {
                "type": "object",
                "properties": {
                  "frequency": {
                    "type": "string",
                    "description": "How often this registry is synced",
                    "example": "daily"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["full", "incremental", "diff-based"],
                    "description": "Synchronization method",
                    "example": "incremental"
                  },
                  "priority": {
                    "type": "string",
                    "enum": ["high", "medium", "low"],
                    "description": "Sync priority",
                    "example": "high"
                  }
                }
              }
            }
          }
        }
      }
    },
    "additionalProperties": false
  }