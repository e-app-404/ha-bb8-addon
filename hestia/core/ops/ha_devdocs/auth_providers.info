Authentication providers
Home Assistant10-12 minutes
Caution

This is an advanced feature.

When you log in, an auth provider checks your credentials to make sure you are an authorized user.

Configuring auth providers
Warning

Home Assistant automatically configures the standard auth providers so you don’t need to specify auth_providers in your configuration.yamlThe configuration.yaml file is the main configuration file for Home Assistant. It lists the integrations to be loaded and their specific configurations. In some cases, the configuration needs to be edited manually directly in the configuration.yaml file. Most integrations can be configured in the UI. [Learn more] file unless you are configuring more than one. Specifying auth_providers will disable all auth providers that are not listed, so you could reduce your security or create difficulties logging in if it is not configured correctly.

If you decide to use trusted_networks as your auth_provider there won’t be a way to authenticate for a device outside of your listed trusted network. To overcome this ensure you add the default auth_provider with type: homeassistant back in manually. This will then present you with the default auth login screen when trusted network authentication fails as expected from outside your LAN.

Authentication providers are configured in your configuration.yamlThe configuration.yaml file is the main configuration file for Home Assistant. It lists the integrations to be loaded and their specific configurations. In some cases, the configuration needs to be edited manually directly in the configuration.yaml file. Most integrations can be configured in the UI. [Learn more] file under the homeassistant: block. If you are moving configuration to packages, this particular configuration must stay within ‘configuration.yaml’. See Issue 16441 in the warning block at the bottom of this page.

You can supply more than one, for example:

homeassistant:
  auth_providers:
    - type: homeassistant
    - type: trusted_networks
      trusted_networks:
        - 192.168.0.0/24
---
title: "Authentication providers"
summary: |
  This document explains Home Assistant authentication providers, examples, and
  configuration variables. It preserves the original guidance and examples but
  is presented as structured YAML for easier consumption by tooling.

notes: |
  Caution: This is an advanced feature.
  When you log in, an auth provider checks your credentials to make sure you are
  an authorized user.

warning: |
  Home Assistant automatically configures the standard auth providers so you
  don’t need to specify `auth_providers` in your `configuration.yaml` file
  unless you are configuring more than one. Specifying `auth_providers` will
  disable all auth providers that are not listed, which can reduce security or
  cause login difficulties if misconfigured.

recommendation: |
  If you decide to use `trusted_networks` as your auth_provider there won’t be
  a way to authenticate for a device outside of your listed trusted network.
  To avoid locking yourself out, include the default provider:
    - type: homeassistant

usage: |
  Authentication providers are configured in your `configuration.yaml` under
  the `homeassistant:` block. If you are moving configuration to packages,
  `auth_providers` must remain in `configuration.yaml` (see upstream issue 16441).

examples:
  multiple_providers: |
    homeassistant:
      auth_providers:
        - type: homeassistant
        - type: trusted_networks
          trusted_networks:
            - 192.168.0.0/24

  default_provider: |
    homeassistant:
      auth_providers:
        - type: homeassistant

trusted_networks:
  description: |
    The trusted networks auth provider defines a range of IP addresses for which
    no authentication will be required (also known as "allowlisting"). When you
    log in from one of these networks you will be asked which user account to
    use and won’t need to enter a password.

  important: |
    You cannot trust a network that you are using in any `trusted_proxies`.
    The `trusted_networks` authentication will fail with: "Your computer is not allowed".

  example: |
    homeassistant:
      auth_providers:
        - type: trusted_networks
          trusted_networks:
            - 192.168.0.0/24
            - fd00::/8

trusted_networks_variables:
  trusted_networks:
    type: list
    required: true
    description: "List of IP addresses or IP networks to allow (IPv4 or IPv6)."

  trusted_users:
    type: map
    required: false
    description: |
      Map IP addresses or networks to user IDs or lists of user IDs available
      to select when logging in from the specified address/network.

  allow_bypass_login:
    type: boolean
    default: false
    description: "When true, and only a single non-system user is available, skip the login page (cookie not persisted)."

trusted_users_example: |
  homeassistant:
    auth_providers:
      - type: trusted_networks
        trusted_networks:
          - 192.168.0.0/24
          - 192.168.10.0/24
          - fd00::/8
        trusted_users:
          192.168.0.1: user1_id
          192.168.0.0/24:
            - user1_id
            - user2_id
          "fd00::/8":
            - user1_id
            - group: system-users

user_id_note: |
  For `trusted_users` you must use user IDs (not usernames). To find a user ID,
  browse to `/config/users/` in Home Assistant, select a user and copy the ID
  (e.g. acbbff56461748718f3650fb914b88c9). IPv6 addresses must be quoted.

skip_login_example: |
  # Assuming a single non-system user exists
  homeassistant:
    auth_providers:
      - type: trusted_networks
        trusted_networks:
          - 192.168.0.0/24
          - 127.0.0.1
          - ::1
        allow_bypass_login: true
      - type: homeassistant

command_line_provider:
  description: |
    The command line auth provider runs a shell command to authenticate users.
    `username` and `password` are passed as environment variables; exit code 0
    grants access. This can be used to integrate external systems (LDAP/RADIUS).

  example: |
    homeassistant:
      auth_providers:
        - type: command_line
          command: /absolute/path/to/command
          #args: ["--first", "--second"]
          #meta: true

  meta_note: |
    When `meta: true` is set, the command can output key/value pairs to stdout
    to populate the user object (first authentication only):

    name = John Doe
    group = system-users
    local_only = true

    Leading/trailing whitespace and lines starting with `#` are ignored.

limitations: |
  Meta variables are only respected on first authentication for a given user; on
  subsequent logins the previously created user object is reused.

notes: |
  Any leading/trailing whitespace is stripped from usernames before invoking the
  command (e.g. " hello " → "hello").

---